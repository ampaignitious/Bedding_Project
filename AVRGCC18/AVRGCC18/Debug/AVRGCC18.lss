
AVRGCC18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000162  00800200  0000147a  0000150e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000147a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800362  00800362  00001670  2**0
                  ALLOC
  3 .stab         00001050  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003ff  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00002abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000183  00000000  00000000  00002b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fe2  00000000  00000000  00002cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000619  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001378  00000000  00000000  000042bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00005638  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000404  00000000  00000000  00005798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b89  00000000  00000000  00005b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000fc  00000000  00000000  00006725  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c8  00000000  00000000  00006821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b2 e0       	ldi	r27, 0x02	; 2
      f6:	ea e7       	ldi	r30, 0x7A	; 122
      f8:	f4 e1       	ldi	r31, 0x14	; 20
      fa:	00 e0       	ldi	r16, 0x00	; 0
      fc:	0b bf       	out	0x3b, r16	; 59
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x14>
     100:	07 90       	elpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a2 36       	cpi	r26, 0x62	; 98
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0x10>

0000010a <__do_clear_bss>:
     10a:	13 e0       	ldi	r17, 0x03	; 3
     10c:	a2 e6       	ldi	r26, 0x62	; 98
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a8 3e       	cpi	r26, 0xE8	; 232
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <main>
     11e:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <EEPROM_write>:
int times[]={0,0,0};
char numeric_str[10];

void EEPROM_write(int start_addr, int stop_addr, char* ucData)
{
	for(int i=strlen(ucData)-1; stop_addr>=start_addr; i--){
     126:	e4 2f       	mov	r30, r20
     128:	f5 2f       	mov	r31, r21
     12a:	df 01       	movw	r26, r30
     12c:	0d 90       	ld	r0, X+
     12e:	00 20       	and	r0, r0
     130:	e9 f7       	brne	.-6      	; 0x12c <EEPROM_write+0x6>
     132:	11 97       	sbiw	r26, 0x01	; 1
     134:	ae 1b       	sub	r26, r30
     136:	bf 0b       	sbc	r27, r31
     138:	68 17       	cp	r22, r24
     13a:	79 07       	cpc	r23, r25
     13c:	dc f0       	brlt	.+54     	; 0x174 <EEPROM_write+0x4e>
     13e:	9d 01       	movw	r18, r26
     140:	21 50       	subi	r18, 0x01	; 1
     142:	30 40       	sbci	r19, 0x00	; 0
		
		if(i>=0){
			EEDR = ucData[i];
		}
		else{
			EEDR = '0';
     144:	a0 e3       	ldi	r26, 0x30	; 48

void EEPROM_write(int start_addr, int stop_addr, char* ucData)
{
	for(int i=strlen(ucData)-1; stop_addr>=start_addr; i--){
		// Wait for completion of previous write
		while(EECR & (1<<EEPE));
     146:	f9 99       	sbic	0x1f, 1	; 31
     148:	fe cf       	rjmp	.-4      	; 0x146 <EEPROM_write+0x20>
		
		// Set up address and Data Registers
		EEAR = stop_addr;
     14a:	72 bd       	out	0x22, r23	; 34
     14c:	61 bd       	out	0x21, r22	; 33
		
		if(i>=0){
     14e:	33 23       	and	r19, r19
     150:	34 f0       	brlt	.+12     	; 0x15e <EEPROM_write+0x38>
int totals[]={0,0,0};
long overall_totals[]={0,0,0};
int times[]={0,0,0};
char numeric_str[10];

void EEPROM_write(int start_addr, int stop_addr, char* ucData)
     152:	fa 01       	movw	r30, r20
     154:	e2 0f       	add	r30, r18
     156:	f3 1f       	adc	r31, r19
		
		// Set up address and Data Registers
		EEAR = stop_addr;
		
		if(i>=0){
			EEDR = ucData[i];
     158:	e0 81       	ld	r30, Z
     15a:	e0 bd       	out	0x20, r30	; 32
     15c:	01 c0       	rjmp	.+2      	; 0x160 <EEPROM_write+0x3a>
		}
		else{
			EEDR = '0';
     15e:	a0 bd       	out	0x20, r26	; 32
		}
		
		// Write logical one to EEMPE
		EECR |= (1<<EEMPE);
     160:	fa 9a       	sbi	0x1f, 2	; 31
		
		// Start eeprom write by setting EEPE
		EECR |= (1<<EEPE);
     162:	f9 9a       	sbi	0x1f, 1	; 31
		stop_addr--;
     164:	61 50       	subi	r22, 0x01	; 1
     166:	70 40       	sbci	r23, 0x00	; 0
int times[]={0,0,0};
char numeric_str[10];

void EEPROM_write(int start_addr, int stop_addr, char* ucData)
{
	for(int i=strlen(ucData)-1; stop_addr>=start_addr; i--){
     168:	68 17       	cp	r22, r24
     16a:	79 07       	cpc	r23, r25
     16c:	1c f0       	brlt	.+6      	; 0x174 <EEPROM_write+0x4e>
     16e:	21 50       	subi	r18, 0x01	; 1
     170:	30 40       	sbci	r19, 0x00	; 0
     172:	e9 cf       	rjmp	.-46     	; 0x146 <EEPROM_write+0x20>
     174:	08 95       	ret

00000176 <EEPROM_read>:
		EECR |= (1<<EEPE);
		stop_addr--;
	}
}

char* EEPROM_read(unsigned int start_addr, unsigned int stop_addr){
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	8c 01       	movw	r16, r24
     184:	eb 01       	movw	r28, r22
	strcpy(eeprom_data,"");
     186:	10 92 98 03 	sts	0x0398, r1
	for(;start_addr<=stop_addr; start_addr++){
     18a:	68 17       	cp	r22, r24
     18c:	79 07       	cpc	r23, r25
     18e:	b8 f0       	brcs	.+46     	; 0x1be <EEPROM_read+0x48>
		
		// Start eeprom read by writing EERE
		EECR |= (1<<EERE);
		
		// Return data from Data Register
		strncat(eeprom_data, &EEDR, 1);
     190:	0f 2e       	mov	r0, r31
     192:	f8 e9       	ldi	r31, 0x98	; 152
     194:	ef 2e       	mov	r14, r31
     196:	f3 e0       	ldi	r31, 0x03	; 3
     198:	ff 2e       	mov	r15, r31
     19a:	f0 2d       	mov	r31, r0

char* EEPROM_read(unsigned int start_addr, unsigned int stop_addr){
	strcpy(eeprom_data,"");
	for(;start_addr<=stop_addr; start_addr++){
		// Wait for completion of previous write
		while(EECR & (1<<EEPE));
     19c:	f9 99       	sbic	0x1f, 1	; 31
     19e:	fe cf       	rjmp	.-4      	; 0x19c <EEPROM_read+0x26>
		
		// Set up address register
		EEAR = start_addr;
     1a0:	12 bd       	out	0x22, r17	; 34
     1a2:	01 bd       	out	0x21, r16	; 33
		
		// Start eeprom read by writing EERE
		EECR |= (1<<EERE);
     1a4:	f8 9a       	sbi	0x1f, 0	; 31
		
		// Return data from Data Register
		strncat(eeprom_data, &EEDR, 1);
     1a6:	c7 01       	movw	r24, r14
     1a8:	60 e4       	ldi	r22, 0x40	; 64
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	41 e0       	ldi	r20, 0x01	; 1
     1ae:	50 e0       	ldi	r21, 0x00	; 0
     1b0:	0e 94 43 07 	call	0xe86	; 0xe86 <strncat>
	}
}

char* EEPROM_read(unsigned int start_addr, unsigned int stop_addr){
	strcpy(eeprom_data,"");
	for(;start_addr<=stop_addr; start_addr++){
     1b4:	0f 5f       	subi	r16, 0xFF	; 255
     1b6:	1f 4f       	sbci	r17, 0xFF	; 255
     1b8:	c0 17       	cp	r28, r16
     1ba:	d1 07       	cpc	r29, r17
     1bc:	78 f7       	brcc	.-34     	; 0x19c <EEPROM_read+0x26>
		
		// Return data from Data Register
		strncat(eeprom_data, &EEDR, 1);
	}
	return eeprom_data;
}
     1be:	88 e9       	ldi	r24, 0x98	; 152
     1c0:	93 e0       	ldi	r25, 0x03	; 3
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	08 95       	ret

000001d0 <num_to_str>:

char* num_to_str(unsigned long num){
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
	sprintf(numeric_str, "%lu", num);
     1d4:	2d b7       	in	r18, 0x3d	; 61
     1d6:	3e b7       	in	r19, 0x3e	; 62
     1d8:	28 50       	subi	r18, 0x08	; 8
     1da:	30 40       	sbci	r19, 0x00	; 0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	3e bf       	out	0x3e, r19	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	2d bf       	out	0x3d, r18	; 61
     1e6:	ed b7       	in	r30, 0x3d	; 61
     1e8:	fe b7       	in	r31, 0x3e	; 62
     1ea:	31 96       	adiw	r30, 0x01	; 1
     1ec:	ca e7       	ldi	r28, 0x7A	; 122
     1ee:	d3 e0       	ldi	r29, 0x03	; 3
     1f0:	ad b7       	in	r26, 0x3d	; 61
     1f2:	be b7       	in	r27, 0x3e	; 62
     1f4:	12 96       	adiw	r26, 0x02	; 2
     1f6:	dc 93       	st	X, r29
     1f8:	ce 93       	st	-X, r28
     1fa:	11 97       	sbiw	r26, 0x01	; 1
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	32 e0       	ldi	r19, 0x02	; 2
     200:	33 83       	std	Z+3, r19	; 0x03
     202:	22 83       	std	Z+2, r18	; 0x02
     204:	64 83       	std	Z+4, r22	; 0x04
     206:	75 83       	std	Z+5, r23	; 0x05
     208:	86 83       	std	Z+6, r24	; 0x06
     20a:	97 83       	std	Z+7, r25	; 0x07
     20c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sprintf>
     210:	2d b7       	in	r18, 0x3d	; 61
     212:	3e b7       	in	r19, 0x3e	; 62
     214:	28 5f       	subi	r18, 0xF8	; 248
     216:	3f 4f       	sbci	r19, 0xFF	; 255
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	3e bf       	out	0x3e, r19	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	2d bf       	out	0x3d, r18	; 61
	return numeric_str;
}
     222:	ce 01       	movw	r24, r28
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	08 95       	ret

0000022a <enable>:

void enable(){
	PORTG |= (1<<5); //en - give a 1
     22a:	a5 9a       	sbi	0x14, 5	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22c:	83 ec       	ldi	r24, 0xC3	; 195
     22e:	99 e0       	ldi	r25, 0x09	; 9
     230:	01 97       	sbiw	r24, 0x01	; 1
     232:	f1 f7       	brne	.-4      	; 0x230 <enable+0x6>
     234:	00 c0       	rjmp	.+0      	; 0x236 <enable+0xc>
     236:	00 00       	nop
	_delay_ms(10);
	PORTG &= ~(1<<5); //en - give a 0
     238:	a5 98       	cbi	0x14, 5	; 20
     23a:	83 ec       	ldi	r24, 0xC3	; 195
     23c:	99 e0       	ldi	r25, 0x09	; 9
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <enable+0x14>
     242:	00 c0       	rjmp	.+0      	; 0x244 <enable+0x1a>
     244:	00 00       	nop
	_delay_ms(10);
}
     246:	08 95       	ret

00000248 <start_lcd>:

void start_lcd(){
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	PORTC |=(1<<2);
     24c:	42 9a       	sbi	0x08, 2	; 8
	PORTG &= ~(1<<4); // r/w - writing
     24e:	a4 98       	cbi	0x14, 4	; 20
	PORTG &= ~(1<<3); //rs - command mode
     250:	a3 98       	cbi	0x14, 3	; 20
	
	PORTH = 0x3f; // set 8 data lines 0011 1111
     252:	c2 e0       	ldi	r28, 0x02	; 2
     254:	d1 e0       	ldi	r29, 0x01	; 1
     256:	8f e3       	ldi	r24, 0x3F	; 63
     258:	88 83       	st	Y, r24
	enable();
     25a:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
	
	PORTH = 0x0f; // blink 0000 1111
     25e:	8f e0       	ldi	r24, 0x0F	; 15
     260:	88 83       	st	Y, r24
	enable();
     262:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
	
	PORTH = 0x10; // display 0001 1100
     266:	80 e1       	ldi	r24, 0x10	; 16
     268:	88 83       	st	Y, r24
	enable();
     26a:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <stop_lcd>:

void stop_lcd(){
	PORTG &= ~(1<<3); //rs - command mode
     274:	a3 98       	cbi	0x14, 3	; 20
	PORTH = 0x08; // of
     276:	88 e0       	ldi	r24, 0x08	; 8
     278:	80 93 02 01 	sts	0x0102, r24
	enable();
     27c:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
}
     280:	08 95       	ret

00000282 <print1>:

void print1(char* messages[], int rows[],int num){
     282:	2f 92       	push	r2
     284:	3f 92       	push	r3
     286:	4f 92       	push	r4
     288:	5f 92       	push	r5
     28a:	6f 92       	push	r6
     28c:	7f 92       	push	r7
     28e:	8f 92       	push	r8
     290:	9f 92       	push	r9
     292:	af 92       	push	r10
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	28 97       	sbiw	r28, 0x08	; 8
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	e8 2e       	mov	r14, r24
     2b8:	09 2f       	mov	r16, r25
     2ba:	c6 2e       	mov	r12, r22
     2bc:	a7 2e       	mov	r10, r23
     2be:	3a 01       	movw	r6, r20
	stop_lcd();
     2c0:	0e 94 3a 01 	call	0x274	; 0x274 <stop_lcd>
	start_lcd();
     2c4:	0e 94 24 01 	call	0x248	; 0x248 <start_lcd>
	
	for(int i=0; i<=num; i++){
     2c8:	77 20       	and	r7, r7
     2ca:	0c f4       	brge	.+2      	; 0x2ce <print1+0x4c>
     2cc:	69 c0       	rjmp	.+210    	; 0x3a0 <print1+0x11e>
     2ce:	f0 2e       	mov	r15, r16
     2d0:	8a 2d       	mov	r24, r10
     2d2:	ac 2c       	mov	r10, r12
     2d4:	b8 2e       	mov	r11, r24
     2d6:	88 24       	eor	r8, r8
     2d8:	99 24       	eor	r9, r9
		if (rows[i]>0){
			PORTG &= ~(1<<3); //rs - command mode
			enable();
			int positions[] = {0x80,0xbf,0x93,0xd3};
     2da:	1e 01       	movw	r2, r28
     2dc:	08 94       	sec
     2de:	21 1c       	adc	r2, r1
     2e0:	31 1c       	adc	r3, r1
			PORTH = positions[rows[i]]; // set row
     2e2:	0f 2e       	mov	r0, r31
     2e4:	f2 e0       	ldi	r31, 0x02	; 2
     2e6:	cf 2e       	mov	r12, r31
     2e8:	f1 e0       	ldi	r31, 0x01	; 1
     2ea:	df 2e       	mov	r13, r31
     2ec:	f0 2d       	mov	r31, r0

void print1(char* messages[], int rows[],int num){
	stop_lcd();
	start_lcd();
	
	for(int i=0; i<=num; i++){
     2ee:	44 24       	eor	r4, r4
     2f0:	55 24       	eor	r5, r5
	PORTG &= ~(1<<3); //rs - command mode
	PORTH = 0x08; // of
	enable();
}

void print1(char* messages[], int rows[],int num){
     2f2:	85 01       	movw	r16, r10
	stop_lcd();
	start_lcd();
	
	for(int i=0; i<=num; i++){
		if (rows[i]>0){
     2f4:	d5 01       	movw	r26, r10
     2f6:	8d 91       	ld	r24, X+
     2f8:	9c 91       	ld	r25, X
     2fa:	11 97       	sbiw	r26, 0x01	; 1
     2fc:	18 16       	cp	r1, r24
     2fe:	19 06       	cpc	r1, r25
     300:	bc f4       	brge	.+46     	; 0x330 <print1+0xae>
			PORTG &= ~(1<<3); //rs - command mode
     302:	a3 98       	cbi	0x14, 3	; 20
			enable();
     304:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
			int positions[] = {0x80,0xbf,0x93,0xd3};
     308:	d1 01       	movw	r26, r2
     30a:	e9 e5       	ldi	r30, 0x59	; 89
     30c:	f3 e0       	ldi	r31, 0x03	; 3
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	01 90       	ld	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	81 50       	subi	r24, 0x01	; 1
     316:	e1 f7       	brne	.-8      	; 0x310 <print1+0x8e>
			PORTH = positions[rows[i]]; // set row
     318:	d8 01       	movw	r26, r16
     31a:	ed 91       	ld	r30, X+
     31c:	fc 91       	ld	r31, X
     31e:	ee 0f       	add	r30, r30
     320:	ff 1f       	adc	r31, r31
     322:	e2 0d       	add	r30, r2
     324:	f3 1d       	adc	r31, r3
     326:	80 81       	ld	r24, Z
     328:	f6 01       	movw	r30, r12
     32a:	80 83       	st	Z, r24
			enable();
     32c:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
		}
		
		//switch to data mode
		PORTG |= (1<<3);
     330:	a3 9a       	sbi	0x14, 3	; 20
		enable();
     332:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	a8 0e       	add	r10, r24
     33c:	b9 1e       	adc	r11, r25
		
		if (rows[i]==0){
     33e:	d8 01       	movw	r26, r16
     340:	8d 91       	ld	r24, X+
     342:	9c 91       	ld	r25, X
     344:	11 97       	sbiw	r26, 0x01	; 1
     346:	00 97       	sbiw	r24, 0x00	; 0
     348:	29 f4       	brne	.+10     	; 0x354 <print1+0xd2>
			PORTH = ' ';
     34a:	80 e2       	ldi	r24, 0x20	; 32
     34c:	f6 01       	movw	r30, r12
     34e:	80 83       	st	Z, r24
			enable();
     350:	0e 94 15 01 	call	0x22a	; 0x22a <enable>

void print1(char* messages[], int rows[],int num){
	stop_lcd();
	start_lcd();
	
	for(int i=0; i<=num; i++){
     354:	82 01       	movw	r16, r4
     356:	0a c0       	rjmp	.+20     	; 0x36c <print1+0xea>
			PORTH = ' ';
			enable();
		}
		
		for(int y=0; y<strlen(messages[i]); y++){
			PORTH = messages[i][y];
     358:	80 0f       	add	r24, r16
     35a:	91 1f       	adc	r25, r17
     35c:	dc 01       	movw	r26, r24
     35e:	8c 91       	ld	r24, X
     360:	f6 01       	movw	r30, r12
     362:	80 83       	st	Z, r24
			enable();
     364:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
		if (rows[i]==0){
			PORTH = ' ';
			enable();
		}
		
		for(int y=0; y<strlen(messages[i]); y++){
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	d7 01       	movw	r26, r14
     36e:	8d 91       	ld	r24, X+
     370:	9c 91       	ld	r25, X
     372:	e8 2f       	mov	r30, r24
     374:	f9 2f       	mov	r31, r25
     376:	df 01       	movw	r26, r30
     378:	0d 90       	ld	r0, X+
     37a:	00 20       	and	r0, r0
     37c:	e9 f7       	brne	.-6      	; 0x378 <print1+0xf6>
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	ae 1b       	sub	r26, r30
     382:	bf 0b       	sbc	r27, r31
     384:	0a 17       	cp	r16, r26
     386:	1b 07       	cpc	r17, r27
     388:	38 f3       	brcs	.-50     	; 0x358 <print1+0xd6>

void print1(char* messages[], int rows[],int num){
	stop_lcd();
	start_lcd();
	
	for(int i=0; i<=num; i++){
     38a:	08 94       	sec
     38c:	81 1c       	adc	r8, r1
     38e:	91 1c       	adc	r9, r1
     390:	e2 e0       	ldi	r30, 0x02	; 2
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	ee 0e       	add	r14, r30
     396:	ff 1e       	adc	r15, r31
     398:	68 14       	cp	r6, r8
     39a:	79 04       	cpc	r7, r9
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <print1+0x11e>
     39e:	a9 cf       	rjmp	.-174    	; 0x2f2 <print1+0x70>
		for(int y=0; y<strlen(messages[i]); y++){
			PORTH = messages[i][y];
			enable();
		}
	}
}
     3a0:	28 96       	adiw	r28, 0x08	; 8
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	cf 91       	pop	r28
     3ae:	df 91       	pop	r29
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	bf 90       	pop	r11
     3be:	af 90       	pop	r10
     3c0:	9f 90       	pop	r9
     3c2:	8f 90       	pop	r8
     3c4:	7f 90       	pop	r7
     3c6:	6f 90       	pop	r6
     3c8:	5f 90       	pop	r5
     3ca:	4f 90       	pop	r4
     3cc:	3f 90       	pop	r3
     3ce:	2f 90       	pop	r2
     3d0:	08 95       	ret

000003d2 <print>:

void print(char word[20],int row){
     3d2:	af 92       	push	r10
     3d4:	bf 92       	push	r11
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	28 97       	sbiw	r28, 0x08	; 8
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	cd bf       	out	0x3d, r28	; 61
     3f6:	d8 2e       	mov	r13, r24
     3f8:	c9 2e       	mov	r12, r25
     3fa:	8b 01       	movw	r16, r22
	PORTG &= ~(1<<3); //rs - command mode
     3fc:	a3 98       	cbi	0x14, 3	; 20
	enable();
     3fe:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
	if (row>0){
     402:	10 16       	cp	r1, r16
     404:	11 06       	cpc	r1, r17
     406:	9c f4       	brge	.+38     	; 0x42e <print+0x5c>
		int positions[] = {0x80,0xbf,0x93,0xd3};
     408:	de 01       	movw	r26, r28
     40a:	11 96       	adiw	r26, 0x01	; 1
     40c:	e1 e5       	ldi	r30, 0x51	; 81
     40e:	f3 e0       	ldi	r31, 0x03	; 3
     410:	88 e0       	ldi	r24, 0x08	; 8
     412:	01 90       	ld	r0, Z+
     414:	0d 92       	st	X+, r0
     416:	81 50       	subi	r24, 0x01	; 1
     418:	e1 f7       	brne	.-8      	; 0x412 <print+0x40>
		PORTH = positions[row]; // set print out 1001 0010
     41a:	f8 01       	movw	r30, r16
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	ec 0f       	add	r30, r28
     422:	fd 1f       	adc	r31, r29
     424:	81 81       	ldd	r24, Z+1	; 0x01
     426:	80 93 02 01 	sts	0x0102, r24
		enable();
     42a:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
	}
	
	//switch to data mode
	PORTG |= (1<<3);
     42e:	a3 9a       	sbi	0x14, 3	; 20
	enable();
     430:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
	
	if (row==0){
     434:	01 15       	cp	r16, r1
     436:	11 05       	cpc	r17, r1
     438:	29 f4       	brne	.+10     	; 0x444 <print+0x72>
		PORTH = ' ';
     43a:	80 e2       	ldi	r24, 0x20	; 32
     43c:	80 93 02 01 	sts	0x0102, r24
		enable();
     440:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
     444:	ed 2c       	mov	r14, r13
     446:	fc 2c       	mov	r15, r12
			enable();
		}
	}
}

void print(char word[20],int row){
     448:	00 e0       	ldi	r16, 0x00	; 0
     44a:	10 e0       	ldi	r17, 0x00	; 0
		PORTH = ' ';
		enable();
	}
	
	for(int i=0; i<strlen(word); i++){
		PORTH = word[i];
     44c:	0f 2e       	mov	r0, r31
     44e:	f2 e0       	ldi	r31, 0x02	; 2
     450:	af 2e       	mov	r10, r31
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	bf 2e       	mov	r11, r31
     456:	f0 2d       	mov	r31, r0
     458:	09 c0       	rjmp	.+18     	; 0x46c <print+0x9a>
     45a:	f7 01       	movw	r30, r14
     45c:	81 91       	ld	r24, Z+
     45e:	7f 01       	movw	r14, r30
     460:	f5 01       	movw	r30, r10
     462:	80 83       	st	Z, r24
		enable();
     464:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
	if (row==0){
		PORTH = ' ';
		enable();
	}
	
	for(int i=0; i<strlen(word); i++){
     468:	0f 5f       	subi	r16, 0xFF	; 255
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	ed 2d       	mov	r30, r13
     46e:	fc 2d       	mov	r31, r12
     470:	df 01       	movw	r26, r30
     472:	0d 90       	ld	r0, X+
     474:	00 20       	and	r0, r0
     476:	e9 f7       	brne	.-6      	; 0x472 <print+0xa0>
     478:	11 97       	sbiw	r26, 0x01	; 1
     47a:	ae 1b       	sub	r26, r30
     47c:	bf 0b       	sbc	r27, r31
     47e:	0a 17       	cp	r16, r26
     480:	1b 07       	cpc	r17, r27
     482:	58 f3       	brcs	.-42     	; 0x45a <print+0x88>
		PORTH = word[i];
		enable();
	}
}
     484:	28 96       	adiw	r28, 0x08	; 8
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	cf 90       	pop	r12
     4a0:	bf 90       	pop	r11
     4a2:	af 90       	pop	r10
     4a4:	08 95       	ret

000004a6 <clear>:

void clear(){
	PORTG &= ~(1<<3); //rs - command mode
     4a6:	a3 98       	cbi	0x14, 3	; 20
	enable();
     4a8:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
	PORTH = 0x01;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 02 01 	sts	0x0102, r24
	enable();
     4b2:	0e 94 15 01 	call	0x22a	; 0x22a <enable>
}
     4b6:	08 95       	ret

000004b8 <choose>:

char* choose(){
     4b8:	2f 92       	push	r2
     4ba:	3f 92       	push	r3
     4bc:	4f 92       	push	r4
     4be:	5f 92       	push	r5
     4c0:	7f 92       	push	r7
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	2d 97       	sbiw	r28, 0x0d	; 13
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
	strcpy(input,"");
     4ea:	10 92 84 03 	sts	0x0384, r1
	DDRJ = 0xf8;
     4ee:	88 ef       	ldi	r24, 0xF8	; 248
     4f0:	80 93 04 01 	sts	0x0104, r24
	char selections[4][3] = {{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
     4f4:	de 01       	movw	r26, r28
     4f6:	11 96       	adiw	r26, 0x01	; 1
     4f8:	e5 e4       	ldi	r30, 0x45	; 69
     4fa:	f3 e0       	ldi	r31, 0x03	; 3
     4fc:	8c e0       	ldi	r24, 0x0C	; 12
     4fe:	01 90       	ld	r0, Z+
     500:	0d 92       	st	X+, r0
     502:	81 50       	subi	r24, 0x01	; 1
     504:	e1 f7       	brne	.-8      	; 0x4fe <choose+0x46>
	
	/* Replace with your application code */
	while (1) {
		char choice = '*';
     506:	0f 2e       	mov	r0, r31
     508:	fa e2       	ldi	r31, 0x2A	; 42
     50a:	7f 2e       	mov	r7, r31
     50c:	f0 2d       	mov	r31, r0
     50e:	5e 01       	movw	r10, r28
     510:	08 94       	sec
     512:	a1 1c       	adc	r10, r1
     514:	b1 1c       	adc	r11, r1
		int choice_set = 0;
		for (int i=3; i<=6; i++){
     516:	0f 2e       	mov	r0, r31
     518:	f3 e0       	ldi	r31, 0x03	; 3
     51a:	8f 2e       	mov	r8, r31
     51c:	99 24       	eor	r9, r9
     51e:	f0 2d       	mov	r31, r0
			PORTJ = ~(1<<i);
     520:	ee 24       	eor	r14, r14
     522:	ff 24       	eor	r15, r15
     524:	e3 94       	inc	r14
     526:	0f 2e       	mov	r0, r31
     528:	f5 e0       	ldi	r31, 0x05	; 5
     52a:	cf 2e       	mov	r12, r31
     52c:	f1 e0       	ldi	r31, 0x01	; 1
     52e:	df 2e       	mov	r13, r31
     530:	f0 2d       	mov	r31, r0
			if((PINJ&(1<<2))==0)
     532:	03 e0       	ldi	r16, 0x03	; 3
     534:	11 e0       	ldi	r17, 0x01	; 1
		if (choice=='#')
		break;
		else if (choice=='*')
		continue;
		else{
			strncat(input, &choice, 1);
     536:	0f 2e       	mov	r0, r31
     538:	f4 e8       	ldi	r31, 0x84	; 132
     53a:	4f 2e       	mov	r4, r31
     53c:	f3 e0       	ldi	r31, 0x03	; 3
     53e:	5f 2e       	mov	r5, r31
     540:	f0 2d       	mov	r31, r0
     542:	0f 2e       	mov	r0, r31
     544:	fd e0       	ldi	r31, 0x0D	; 13
     546:	2f 2e       	mov	r2, r31
     548:	33 24       	eor	r3, r3
     54a:	f0 2d       	mov	r31, r0
     54c:	2c 0e       	add	r2, r28
     54e:	3d 1e       	adc	r3, r29
	DDRJ = 0xf8;
	char selections[4][3] = {{'1','2','3'},{'4','5','6'},{'7','8','9'},{'*','0','#'}};
	
	/* Replace with your application code */
	while (1) {
		char choice = '*';
     550:	7d 86       	std	Y+13, r7	; 0x0d
     552:	f5 01       	movw	r30, r10
		int choice_set = 0;
		for (int i=3; i<=6; i++){
     554:	c4 01       	movw	r24, r8
			PORTJ = ~(1<<i);
     556:	97 01       	movw	r18, r14
     558:	08 2e       	mov	r0, r24
     55a:	02 c0       	rjmp	.+4      	; 0x560 <choose+0xa8>
     55c:	22 0f       	add	r18, r18
     55e:	33 1f       	adc	r19, r19
     560:	0a 94       	dec	r0
     562:	e2 f7       	brpl	.-8      	; 0x55c <choose+0xa4>
     564:	20 95       	com	r18
     566:	d6 01       	movw	r26, r12
     568:	2c 93       	st	X, r18
			if((PINJ&(1<<2))==0)
     56a:	d8 01       	movw	r26, r16
     56c:	2c 91       	ld	r18, X
     56e:	22 fd       	sbrc	r18, 2
     570:	02 c0       	rjmp	.+4      	; 0x576 <choose+0xbe>
			choice = selections[choice_set][0];
     572:	20 81       	ld	r18, Z
     574:	2d 87       	std	Y+13, r18	; 0x0d
			if((PINJ&(1<<1))==0)
     576:	d8 01       	movw	r26, r16
     578:	2c 91       	ld	r18, X
     57a:	21 fd       	sbrc	r18, 1
     57c:	02 c0       	rjmp	.+4      	; 0x582 <choose+0xca>
			choice = selections[choice_set][1];
     57e:	21 81       	ldd	r18, Z+1	; 0x01
     580:	2d 87       	std	Y+13, r18	; 0x0d
			if((PINJ&(1<<0))==0)
     582:	d8 01       	movw	r26, r16
     584:	2c 91       	ld	r18, X
     586:	20 fd       	sbrc	r18, 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <choose+0xd6>
			choice = selections[choice_set][2];
     58a:	22 81       	ldd	r18, Z+2	; 0x02
     58c:	2d 87       	std	Y+13, r18	; 0x0d
	
	/* Replace with your application code */
	while (1) {
		char choice = '*';
		int choice_set = 0;
		for (int i=3; i<=6; i++){
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	33 96       	adiw	r30, 0x03	; 3
     592:	87 30       	cpi	r24, 0x07	; 7
     594:	91 05       	cpc	r25, r1
     596:	f9 f6       	brne	.-66     	; 0x556 <choose+0x9e>
			if((PINJ&(1<<0))==0)
			choice = selections[choice_set][2];
			choice_set++;
		}
		
		if (choice=='#')
     598:	8d 85       	ldd	r24, Y+13	; 0x0d
     59a:	83 32       	cpi	r24, 0x23	; 35
     59c:	89 f0       	breq	.+34     	; 0x5c0 <choose+0x108>
		break;
		else if (choice=='*')
     59e:	8a 32       	cpi	r24, 0x2A	; 42
     5a0:	b9 f2       	breq	.-82     	; 0x550 <choose+0x98>
		continue;
		else{
			strncat(input, &choice, 1);
     5a2:	c2 01       	movw	r24, r4
     5a4:	b1 01       	movw	r22, r2
     5a6:	a7 01       	movw	r20, r14
     5a8:	0e 94 43 07 	call	0xe86	; 0xe86 <strncat>
     5ac:	8f e9       	ldi	r24, 0x9F	; 159
     5ae:	96 e8       	ldi	r25, 0x86	; 134
     5b0:	a1 e0       	ldi	r26, 0x01	; 1
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	90 40       	sbci	r25, 0x00	; 0
     5b6:	a0 40       	sbci	r26, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <choose+0xfa>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <choose+0x104>
     5bc:	00 00       	nop
     5be:	c8 cf       	rjmp	.-112    	; 0x550 <choose+0x98>
			_delay_ms(500);
		}
	}
	start_lcd();
     5c0:	0e 94 24 01 	call	0x248	; 0x248 <start_lcd>
	return input;
}
     5c4:	84 e8       	ldi	r24, 0x84	; 132
     5c6:	93 e0       	ldi	r25, 0x03	; 3
     5c8:	2d 96       	adiw	r28, 0x0d	; 13
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	cf 91       	pop	r28
     5d6:	df 91       	pop	r29
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	9f 90       	pop	r9
     5ea:	8f 90       	pop	r8
     5ec:	7f 90       	pop	r7
     5ee:	5f 90       	pop	r5
     5f0:	4f 90       	pop	r4
     5f2:	3f 90       	pop	r3
     5f4:	2f 90       	pop	r2
     5f6:	08 95       	ret

000005f8 <load_config>:

void load_config(){
	totals[0] = atoi(EEPROM_read(1,10));
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	0e 94 bb 00 	call	0x176	; 0x176 <EEPROM_read>
     604:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     608:	90 93 63 03 	sts	0x0363, r25
     60c:	80 93 62 03 	sts	0x0362, r24
	totals[1] = atoi(EEPROM_read(11,20));
     610:	8b e0       	ldi	r24, 0x0B	; 11
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	64 e1       	ldi	r22, 0x14	; 20
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	0e 94 bb 00 	call	0x176	; 0x176 <EEPROM_read>
     61c:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     620:	90 93 65 03 	sts	0x0365, r25
     624:	80 93 64 03 	sts	0x0364, r24
	totals[2] = atoi(EEPROM_read(21,30));
     628:	85 e1       	ldi	r24, 0x15	; 21
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	6e e1       	ldi	r22, 0x1E	; 30
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	0e 94 bb 00 	call	0x176	; 0x176 <EEPROM_read>
     634:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     638:	90 93 67 03 	sts	0x0367, r25
     63c:	80 93 66 03 	sts	0x0366, r24
	
	times[2] = atoi(EEPROM_read(31,40));
     640:	8f e1       	ldi	r24, 0x1F	; 31
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	68 e2       	ldi	r22, 0x28	; 40
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	0e 94 bb 00 	call	0x176	; 0x176 <EEPROM_read>
     64c:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     650:	80 93 78 03 	sts	0x0378, r24
     654:	90 93 79 03 	sts	0x0379, r25
	times[1] = times[2]/2;
     658:	28 2f       	mov	r18, r24
     65a:	39 2f       	mov	r19, r25
     65c:	a9 01       	movw	r20, r18
     65e:	55 23       	and	r21, r21
     660:	14 f4       	brge	.+4      	; 0x666 <load_config+0x6e>
     662:	4f 5f       	subi	r20, 0xFF	; 255
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	55 95       	asr	r21
     668:	47 95       	ror	r20
     66a:	50 93 77 03 	sts	0x0377, r21
     66e:	40 93 76 03 	sts	0x0376, r20
	times[0] = times[2]/4;
     672:	28 2f       	mov	r18, r24
     674:	39 2f       	mov	r19, r25
     676:	c9 01       	movw	r24, r18
     678:	99 23       	and	r25, r25
     67a:	0c f4       	brge	.+2      	; 0x67e <load_config+0x86>
     67c:	03 96       	adiw	r24, 0x03	; 3
     67e:	95 95       	asr	r25
     680:	87 95       	ror	r24
     682:	95 95       	asr	r25
     684:	87 95       	ror	r24
     686:	90 93 75 03 	sts	0x0375, r25
     68a:	80 93 74 03 	sts	0x0374, r24
}
     68e:	08 95       	ret

00000690 <config>:

void config(){
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	df 93       	push	r29
     696:	cf 93       	push	r28
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	64 97       	sbiw	r28, 0x14	; 20
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
	PORTC =0x00000010;
     6a8:	80 e1       	ldi	r24, 0x10	; 16
     6aa:	88 b9       	out	0x08, r24	; 8
	char t[20];
	print("WELCOME TO", 0);
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print("COMFORTABLE BEDDINGS",1);
     6b8:	8f e0       	ldi	r24, 0x0F	; 15
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print("SYSTEM",2);
     6c4:	84 e2       	ldi	r24, 0x24	; 36
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     6d0:	8f e3       	ldi	r24, 0x3F	; 63
     6d2:	9d e0       	ldi	r25, 0x0D	; 13
     6d4:	a3 e0       	ldi	r26, 0x03	; 3
     6d6:	81 50       	subi	r24, 0x01	; 1
     6d8:	90 40       	sbci	r25, 0x00	; 0
     6da:	a0 40       	sbci	r26, 0x00	; 0
     6dc:	e1 f7       	brne	.-8      	; 0x6d6 <config+0x46>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <config+0x50>
     6e0:	00 00       	nop
	_delay_ms(1000);
	clear();
     6e2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
	start_lcd();
     6e6:	0e 94 24 01 	call	0x248	; 0x248 <start_lcd>
	
	print("SET CONFIGURATIONS",0);
     6ea:	8b e2       	ldi	r24, 0x2B	; 43
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     6f6:	8f e3       	ldi	r24, 0x3F	; 63
     6f8:	9d e0       	ldi	r25, 0x0D	; 13
     6fa:	a3 e0       	ldi	r26, 0x03	; 3
     6fc:	81 50       	subi	r24, 0x01	; 1
     6fe:	90 40       	sbci	r25, 0x00	; 0
     700:	a0 40       	sbci	r26, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <config+0x6c>
     704:	00 c0       	rjmp	.+0      	; 0x706 <config+0x76>
     706:	00 00       	nop
	_delay_ms(1000);
	
	clear();
     708:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
	print("ENTER TIME", 0);
     70c:	8e e3       	ldi	r24, 0x3E	; 62
     70e:	92 e0       	ldi	r25, 0x02	; 2
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print("FOR LARGE", 1);
     718:	89 e4       	ldi	r24, 0x49	; 73
     71a:	92 e0       	ldi	r25, 0x02	; 2
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print("MATTRESS: ",2);
     724:	83 e5       	ldi	r24, 0x53	; 83
     726:	92 e0       	ldi	r25, 0x02	; 2
     728:	62 e0       	ldi	r22, 0x02	; 2
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	strcpy(t,choose());
     730:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <choose>
     734:	bc 01       	movw	r22, r24
     736:	8e 01       	movw	r16, r28
     738:	0f 5f       	subi	r16, 0xFF	; 255
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 3c 07 	call	0xe78	; 0xe78 <strcpy>
	times[2] = atoi(t);
     742:	c8 01       	movw	r24, r16
     744:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     748:	80 93 78 03 	sts	0x0378, r24
     74c:	90 93 79 03 	sts	0x0379, r25
	times[1] = times[2]/2;
     750:	28 2f       	mov	r18, r24
     752:	39 2f       	mov	r19, r25
     754:	a9 01       	movw	r20, r18
     756:	55 23       	and	r21, r21
     758:	14 f4       	brge	.+4      	; 0x75e <config+0xce>
     75a:	4f 5f       	subi	r20, 0xFF	; 255
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	55 95       	asr	r21
     760:	47 95       	ror	r20
     762:	50 93 77 03 	sts	0x0377, r21
     766:	40 93 76 03 	sts	0x0376, r20
	times[0] = times[2]/4;
     76a:	28 2f       	mov	r18, r24
     76c:	39 2f       	mov	r19, r25
     76e:	c9 01       	movw	r24, r18
     770:	99 23       	and	r25, r25
     772:	0c f4       	brge	.+2      	; 0x776 <config+0xe6>
     774:	03 96       	adiw	r24, 0x03	; 3
     776:	95 95       	asr	r25
     778:	87 95       	ror	r24
     77a:	95 95       	asr	r25
     77c:	87 95       	ror	r24
     77e:	90 93 75 03 	sts	0x0375, r25
     782:	80 93 74 03 	sts	0x0374, r24
	EEPROM_write(31,40,t);
     786:	8f e1       	ldi	r24, 0x1F	; 31
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	68 e2       	ldi	r22, 0x28	; 40
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	8e 01       	movw	r16, r28
     790:	0f 5f       	subi	r16, 0xFF	; 255
     792:	1f 4f       	sbci	r17, 0xFF	; 255
     794:	a8 01       	movw	r20, r16
     796:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
	strcat(t," seconds");
     79a:	d8 01       	movw	r26, r16
     79c:	0d 90       	ld	r0, X+
     79e:	00 20       	and	r0, r0
     7a0:	e9 f7       	brne	.-6      	; 0x79c <config+0x10c>
     7a2:	11 97       	sbiw	r26, 0x01	; 1
     7a4:	ee e5       	ldi	r30, 0x5E	; 94
     7a6:	f2 e0       	ldi	r31, 0x02	; 2
     7a8:	89 e0       	ldi	r24, 0x09	; 9
     7aa:	01 90       	ld	r0, Z+
     7ac:	0d 92       	st	X+, r0
     7ae:	81 50       	subi	r24, 0x01	; 1
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <config+0x11a>
	clear();
     7b2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
	print("TIME SELECTED:", 0);
     7b6:	87 e6       	ldi	r24, 0x67	; 103
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print(t, 1);
     7c2:	8e 01       	movw	r16, r28
     7c4:	0f 5f       	subi	r16, 0xFF	; 255
     7c6:	1f 4f       	sbci	r17, 0xFF	; 255
     7c8:	c8 01       	movw	r24, r16
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     7d2:	8f e3       	ldi	r24, 0x3F	; 63
     7d4:	9d e0       	ldi	r25, 0x0D	; 13
     7d6:	a3 e0       	ldi	r26, 0x03	; 3
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	90 40       	sbci	r25, 0x00	; 0
     7dc:	a0 40       	sbci	r26, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <config+0x148>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <config+0x152>
     7e2:	00 00       	nop
	_delay_ms(1000);
	clear();
     7e4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
	
	print("ENTER NUMBER", 0);
     7e8:	86 e7       	ldi	r24, 0x76	; 118
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print("OF MATTRESSES", 1);
     7f4:	83 e8       	ldi	r24, 0x83	; 131
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print("TO MANUFACTURE",2);
     800:	81 e9       	ldi	r24, 0x91	; 145
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	print("FOR EACH SIZE",3);
     80c:	80 ea       	ldi	r24, 0xA0	; 160
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	63 e0       	ldi	r22, 0x03	; 3
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     818:	8f ed       	ldi	r24, 0xDF	; 223
     81a:	93 e9       	ldi	r25, 0x93	; 147
     81c:	a4 e0       	ldi	r26, 0x04	; 4
     81e:	81 50       	subi	r24, 0x01	; 1
     820:	90 40       	sbci	r25, 0x00	; 0
     822:	a0 40       	sbci	r26, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <config+0x18e>
     826:	00 c0       	rjmp	.+0      	; 0x828 <config+0x198>
     828:	00 00       	nop
	_delay_ms(1500);
	clear();
     82a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
	print("SMALL SIZE:", 0);
     82e:	8e ea       	ldi	r24, 0xAE	; 174
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	strcpy(t,choose());
     83a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <choose>
     83e:	bc 01       	movw	r22, r24
     840:	c8 01       	movw	r24, r16
     842:	0e 94 3c 07 	call	0xe78	; 0xe78 <strcpy>
	EEPROM_write(1,10,t);
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	6a e0       	ldi	r22, 0x0A	; 10
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	a8 01       	movw	r20, r16
     850:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
	totals[0] = atoi(t);
     854:	c8 01       	movw	r24, r16
     856:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     85a:	90 93 63 03 	sts	0x0363, r25
     85e:	80 93 62 03 	sts	0x0362, r24
	strcat(t," mattresses");
     862:	d8 01       	movw	r26, r16
     864:	0d 90       	ld	r0, X+
     866:	00 20       	and	r0, r0
     868:	e9 f7       	brne	.-6      	; 0x864 <config+0x1d4>
     86a:	11 97       	sbiw	r26, 0x01	; 1
     86c:	ea eb       	ldi	r30, 0xBA	; 186
     86e:	f2 e0       	ldi	r31, 0x02	; 2
     870:	8c e0       	ldi	r24, 0x0C	; 12
     872:	01 90       	ld	r0, Z+
     874:	0d 92       	st	X+, r0
     876:	81 50       	subi	r24, 0x01	; 1
     878:	e1 f7       	brne	.-8      	; 0x872 <config+0x1e2>
	print(t, 1);
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5f       	subi	r16, 0xFF	; 255
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	c8 01       	movw	r24, r16
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     88a:	8f ed       	ldi	r24, 0xDF	; 223
     88c:	93 e9       	ldi	r25, 0x93	; 147
     88e:	a4 e0       	ldi	r26, 0x04	; 4
     890:	81 50       	subi	r24, 0x01	; 1
     892:	90 40       	sbci	r25, 0x00	; 0
     894:	a0 40       	sbci	r26, 0x00	; 0
     896:	e1 f7       	brne	.-8      	; 0x890 <config+0x200>
     898:	00 c0       	rjmp	.+0      	; 0x89a <config+0x20a>
     89a:	00 00       	nop
	_delay_ms(1500);
	clear();
     89c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
	
	print("MEDIUM SIZE:", 0);
     8a0:	86 ec       	ldi	r24, 0xC6	; 198
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	strcpy(t,choose());
     8ac:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <choose>
     8b0:	bc 01       	movw	r22, r24
     8b2:	c8 01       	movw	r24, r16
     8b4:	0e 94 3c 07 	call	0xe78	; 0xe78 <strcpy>
	totals[1] = atoi(t);
     8b8:	c8 01       	movw	r24, r16
     8ba:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     8be:	90 93 65 03 	sts	0x0365, r25
     8c2:	80 93 64 03 	sts	0x0364, r24
	EEPROM_write(11,20,t);
     8c6:	8b e0       	ldi	r24, 0x0B	; 11
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	64 e1       	ldi	r22, 0x14	; 20
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	a8 01       	movw	r20, r16
     8d0:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
	strcat(t," mattresses");
     8d4:	d8 01       	movw	r26, r16
     8d6:	0d 90       	ld	r0, X+
     8d8:	00 20       	and	r0, r0
     8da:	e9 f7       	brne	.-6      	; 0x8d6 <config+0x246>
     8dc:	11 97       	sbiw	r26, 0x01	; 1
     8de:	ea eb       	ldi	r30, 0xBA	; 186
     8e0:	f2 e0       	ldi	r31, 0x02	; 2
     8e2:	8c e0       	ldi	r24, 0x0C	; 12
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <config+0x254>
	print(t, 1);
     8ec:	8e 01       	movw	r16, r28
     8ee:	0f 5f       	subi	r16, 0xFF	; 255
     8f0:	1f 4f       	sbci	r17, 0xFF	; 255
     8f2:	c8 01       	movw	r24, r16
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     8fc:	8f ed       	ldi	r24, 0xDF	; 223
     8fe:	93 e9       	ldi	r25, 0x93	; 147
     900:	a4 e0       	ldi	r26, 0x04	; 4
     902:	81 50       	subi	r24, 0x01	; 1
     904:	90 40       	sbci	r25, 0x00	; 0
     906:	a0 40       	sbci	r26, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <config+0x272>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <config+0x27c>
     90c:	00 00       	nop
	_delay_ms(1500);
	clear();
     90e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
	
	print("LARGE SIZE:", 0);
     912:	83 ed       	ldi	r24, 0xD3	; 211
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
	strcpy(t,choose());
     91e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <choose>
     922:	bc 01       	movw	r22, r24
     924:	c8 01       	movw	r24, r16
     926:	0e 94 3c 07 	call	0xe78	; 0xe78 <strcpy>
	totals[2] = atoi(t);
     92a:	c8 01       	movw	r24, r16
     92c:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     930:	90 93 67 03 	sts	0x0367, r25
     934:	80 93 66 03 	sts	0x0366, r24
	EEPROM_write(21,30,t);
     938:	85 e1       	ldi	r24, 0x15	; 21
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	6e e1       	ldi	r22, 0x1E	; 30
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	a8 01       	movw	r20, r16
     942:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
	strcat(t," mattresses");
     946:	d8 01       	movw	r26, r16
     948:	0d 90       	ld	r0, X+
     94a:	00 20       	and	r0, r0
     94c:	e9 f7       	brne	.-6      	; 0x948 <config+0x2b8>
     94e:	11 97       	sbiw	r26, 0x01	; 1
     950:	ea eb       	ldi	r30, 0xBA	; 186
     952:	f2 e0       	ldi	r31, 0x02	; 2
     954:	8c e0       	ldi	r24, 0x0C	; 12
     956:	01 90       	ld	r0, Z+
     958:	0d 92       	st	X+, r0
     95a:	81 50       	subi	r24, 0x01	; 1
     95c:	e1 f7       	brne	.-8      	; 0x956 <config+0x2c6>
	print(t, 1);
     95e:	ce 01       	movw	r24, r28
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     96a:	8f ed       	ldi	r24, 0xDF	; 223
     96c:	93 e9       	ldi	r25, 0x93	; 147
     96e:	a4 e0       	ldi	r26, 0x04	; 4
     970:	81 50       	subi	r24, 0x01	; 1
     972:	90 40       	sbci	r25, 0x00	; 0
     974:	a0 40       	sbci	r26, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <config+0x2e0>
     978:	00 c0       	rjmp	.+0      	; 0x97a <config+0x2ea>
     97a:	00 00       	nop
	_delay_ms(1500);
	clear();
     97c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
}
     980:	64 96       	adiw	r28, 0x14	; 20
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <manufacture>:

void manufacture(int z){
     996:	2f 92       	push	r2
     998:	3f 92       	push	r3
     99a:	4f 92       	push	r4
     99c:	5f 92       	push	r5
     99e:	6f 92       	push	r6
     9a0:	7f 92       	push	r7
     9a2:	8f 92       	push	r8
     9a4:	9f 92       	push	r9
     9a6:	af 92       	push	r10
     9a8:	bf 92       	push	r11
     9aa:	cf 92       	push	r12
     9ac:	df 92       	push	r13
     9ae:	ef 92       	push	r14
     9b0:	ff 92       	push	r15
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	cd b7       	in	r28, 0x3d	; 61
     9bc:	de b7       	in	r29, 0x3e	; 62
     9be:	ca 55       	subi	r28, 0x5A	; 90
     9c0:	d0 40       	sbci	r29, 0x00	; 0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	63 96       	adiw	r28, 0x13	; 19
     9ce:	9f af       	std	Y+63, r25	; 0x3f
     9d0:	8e af       	std	Y+62, r24	; 0x3e
     9d2:	63 97       	sbiw	r28, 0x13	; 19
	PORTC =0x00000100;
     9d4:	18 b8       	out	0x08, r1	; 8
	char message[60];
	for (; z<3; z++){
     9d6:	83 30       	cpi	r24, 0x03	; 3
     9d8:	91 05       	cpc	r25, r1
     9da:	0c f0       	brlt	.+2      	; 0x9de <manufacture+0x48>
     9dc:	ba c1       	rjmp	.+884    	; 0xd52 <manufacture+0x3bc>
	print(t, 1);
	_delay_ms(1500);
	clear();
}

void manufacture(int z){
     9de:	63 96       	adiw	r28, 0x13	; 19
     9e0:	8e ad       	ldd	r24, Y+62	; 0x3e
     9e2:	9f ad       	ldd	r25, Y+63	; 0x3f
     9e4:	63 97       	sbiw	r28, 0x13	; 19
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	63 96       	adiw	r28, 0x13	; 19
     9ec:	2e ad       	ldd	r18, Y+62	; 0x3e
     9ee:	3f ad       	ldd	r19, Y+63	; 0x3f
     9f0:	63 97       	sbiw	r28, 0x13	; 19
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	28 0f       	add	r18, r24
     a00:	39 1f       	adc	r19, r25
     a02:	a9 01       	movw	r20, r18
     a04:	47 5d       	subi	r20, 0xD7	; 215
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	2f 96       	adiw	r28, 0x0f	; 15
     a0a:	5f af       	std	Y+63, r21	; 0x3f
     a0c:	4e af       	std	Y+62, r20	; 0x3e
     a0e:	2f 97       	sbiw	r28, 0x0f	; 15
     a10:	d9 01       	movw	r26, r18
     a12:	d2 96       	adiw	r26, 0x32	; 50
     a14:	61 96       	adiw	r28, 0x11	; 17
     a16:	bf af       	std	Y+63, r27	; 0x3f
     a18:	ae af       	std	Y+62, r26	; 0x3e
     a1a:	61 97       	sbiw	r28, 0x11	; 17
     a1c:	fc 01       	movw	r30, r24
     a1e:	ee 59       	subi	r30, 0x9E	; 158
     a20:	fc 4f       	sbci	r31, 0xFC	; 252
     a22:	67 96       	adiw	r28, 0x17	; 23
     a24:	ff af       	std	Y+63, r31	; 0x3f
     a26:	ee af       	std	Y+62, r30	; 0x3e
     a28:	67 97       	sbiw	r28, 0x17	; 23
     a2a:	0f 2e       	mov	r0, r31
     a2c:	ff e3       	ldi	r31, 0x3F	; 63
     a2e:	4f 2e       	mov	r4, r31
     a30:	f3 e0       	ldi	r31, 0x03	; 3
     a32:	5f 2e       	mov	r5, r31
     a34:	f0 2d       	mov	r31, r0
     a36:	48 0e       	add	r4, r24
     a38:	59 1e       	adc	r5, r25
     a3a:	9c 01       	movw	r18, r24
     a3c:	2c 58       	subi	r18, 0x8C	; 140
     a3e:	3c 4f       	sbci	r19, 0xFC	; 252
     a40:	65 96       	adiw	r28, 0x15	; 21
     a42:	3f af       	std	Y+63, r19	; 0x3f
     a44:	2e af       	std	Y+62, r18	; 0x3e
     a46:	65 97       	sbiw	r28, 0x15	; 21
		int overall_start_loc = (z*10)+41;
		int rem_start_loc = (z*10)+1;
		long curr_sum = atoi(EEPROM_read(overall_start_loc,overall_start_loc+9));
		for(int i = totals[z]; i>0;){
			start_lcd();
			sprintf(message,"MANUFACTURING...%d",i);
     a48:	4e 01       	movw	r8, r28
     a4a:	08 94       	sec
     a4c:	81 1c       	adc	r8, r1
     a4e:	91 1c       	adc	r9, r1
     a50:	c4 01       	movw	r24, r8
     a52:	38 2c       	mov	r3, r8
     a54:	29 2e       	mov	r2, r25
			strcat(message,size[z]);
			strcat(message," remaining");
			
			char* l[] = {message};
			int m[] = {1};
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	68 96       	adiw	r28, 0x18	; 24
     a5c:	8f af       	std	Y+63, r24	; 0x3f
     a5e:	68 97       	sbiw	r28, 0x18	; 24
     a60:	69 96       	adiw	r28, 0x19	; 25
     a62:	9f af       	std	Y+63, r25	; 0x3f
     a64:	69 97       	sbiw	r28, 0x19	; 25
     a66:	ce 01       	movw	r24, r28
     a68:	cf 96       	adiw	r24, 0x3f	; 63
     a6a:	6a 96       	adiw	r28, 0x1a	; 26
     a6c:	8f af       	std	Y+63, r24	; 0x3f
     a6e:	6a 97       	sbiw	r28, 0x1a	; 26
     a70:	6b 96       	adiw	r28, 0x1b	; 27
     a72:	9f af       	std	Y+63, r25	; 0x3f
     a74:	6b 97       	sbiw	r28, 0x1b	; 27
			print1(l,m,1);
			
			for (int a=0; a<times[z]; a++){
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2c 96       	adiw	r28, 0x0c	; 12
     a7c:	8f af       	std	Y+63, r24	; 0x3f
     a7e:	2c 97       	sbiw	r28, 0x0c	; 12
     a80:	2d 96       	adiw	r28, 0x0d	; 13
     a82:	9f af       	std	Y+63, r25	; 0x3f
     a84:	2d 97       	sbiw	r28, 0x0d	; 13

void manufacture(int z){
	PORTC =0x00000100;
	char message[60];
	for (; z<3; z++){
		EEPROM_write(0,0,num_to_str(z+1));
     a86:	63 96       	adiw	r28, 0x13	; 19
     a88:	4e ad       	ldd	r20, Y+62	; 0x3e
     a8a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a8c:	63 97       	sbiw	r28, 0x13	; 19
     a8e:	4f 5f       	subi	r20, 0xFF	; 255
     a90:	5f 4f       	sbci	r21, 0xFF	; 255
     a92:	63 96       	adiw	r28, 0x13	; 19
     a94:	5f af       	std	Y+63, r21	; 0x3f
     a96:	4e af       	std	Y+62, r20	; 0x3e
     a98:	63 97       	sbiw	r28, 0x13	; 19
     a9a:	ba 01       	movw	r22, r20
     a9c:	88 27       	eor	r24, r24
     a9e:	77 fd       	sbrc	r23, 7
     aa0:	80 95       	com	r24
     aa2:	98 2f       	mov	r25, r24
     aa4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <num_to_str>
     aa8:	ac 01       	movw	r20, r24
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
     ab6:	2e 96       	adiw	r28, 0x0e	; 14
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	2e 97       	sbiw	r28, 0x0e	; 14
     abc:	24 96       	adiw	r28, 0x04	; 4
     abe:	5f af       	std	Y+63, r21	; 0x3f
     ac0:	24 97       	sbiw	r28, 0x04	; 4
     ac2:	2f 96       	adiw	r28, 0x0f	; 15
     ac4:	8f ad       	ldd	r24, Y+63	; 0x3f
     ac6:	2f 97       	sbiw	r28, 0x0f	; 15
     ac8:	25 96       	adiw	r28, 0x05	; 5
     aca:	8f af       	std	Y+63, r24	; 0x3f
     acc:	25 97       	sbiw	r28, 0x05	; 5
	print(t, 1);
	_delay_ms(1500);
	clear();
}

void manufacture(int z){
     ace:	2f 96       	adiw	r28, 0x0f	; 15
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	2f 97       	sbiw	r28, 0x0f	; 15
     ad6:	98 97       	sbiw	r26, 0x28	; 40
     ad8:	23 96       	adiw	r28, 0x03	; 3
     ada:	bf af       	std	Y+63, r27	; 0x3f
     adc:	ae af       	std	Y+62, r26	; 0x3e
     ade:	23 97       	sbiw	r28, 0x03	; 3
	PORTC =0x00000100;
	char message[60];
	for (; z<3; z++){
		EEPROM_write(0,0,num_to_str(z+1));
     ae0:	60 96       	adiw	r28, 0x10	; 16
     ae2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ae4:	60 97       	sbiw	r28, 0x10	; 16
     ae6:	26 96       	adiw	r28, 0x06	; 6
     ae8:	bf af       	std	Y+63, r27	; 0x3f
     aea:	26 97       	sbiw	r28, 0x06	; 6
     aec:	61 96       	adiw	r28, 0x11	; 17
     aee:	ef ad       	ldd	r30, Y+63	; 0x3f
     af0:	61 97       	sbiw	r28, 0x11	; 17
     af2:	27 96       	adiw	r28, 0x07	; 7
     af4:	ef af       	std	Y+63, r30	; 0x3f
     af6:	27 97       	sbiw	r28, 0x07	; 7
		int overall_start_loc = (z*10)+41;
		int rem_start_loc = (z*10)+1;
		long curr_sum = atoi(EEPROM_read(overall_start_loc,overall_start_loc+9));
     af8:	2f 96       	adiw	r28, 0x0f	; 15
     afa:	8e ad       	ldd	r24, Y+62	; 0x3e
     afc:	9f ad       	ldd	r25, Y+63	; 0x3f
     afe:	2f 97       	sbiw	r28, 0x0f	; 15
     b00:	61 96       	adiw	r28, 0x11	; 17
     b02:	6e ad       	ldd	r22, Y+62	; 0x3e
     b04:	7f ad       	ldd	r23, Y+63	; 0x3f
     b06:	61 97       	sbiw	r28, 0x11	; 17
     b08:	0e 94 bb 00 	call	0x176	; 0x176 <EEPROM_read>
     b0c:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
		for(int i = totals[z]; i>0;){
     b10:	67 96       	adiw	r28, 0x17	; 23
     b12:	ae ad       	ldd	r26, Y+62	; 0x3e
     b14:	bf ad       	ldd	r27, Y+63	; 0x3f
     b16:	67 97       	sbiw	r28, 0x17	; 23
     b18:	ed 90       	ld	r14, X+
     b1a:	fd 90       	ld	r15, X+
     b1c:	67 96       	adiw	r28, 0x17	; 23
     b1e:	bf af       	std	Y+63, r27	; 0x3f
     b20:	ae af       	std	Y+62, r26	; 0x3e
     b22:	67 97       	sbiw	r28, 0x17	; 23
     b24:	1e 14       	cp	r1, r14
     b26:	1f 04       	cpc	r1, r15
     b28:	0c f0       	brlt	.+2      	; 0xb2c <manufacture+0x196>
     b2a:	e3 c0       	rjmp	.+454    	; 0xcf2 <manufacture+0x35c>
	char message[60];
	for (; z<3; z++){
		EEPROM_write(0,0,num_to_str(z+1));
		int overall_start_loc = (z*10)+41;
		int rem_start_loc = (z*10)+1;
		long curr_sum = atoi(EEPROM_read(overall_start_loc,overall_start_loc+9));
     b2c:	5c 01       	movw	r10, r24
     b2e:	cc 24       	eor	r12, r12
     b30:	b7 fc       	sbrc	r11, 7
     b32:	c0 94       	com	r12
     b34:	dc 2c       	mov	r13, r12
	print(t, 1);
	_delay_ms(1500);
	clear();
}

void manufacture(int z){
     b36:	c2 01       	movw	r24, r4
     b38:	2a 96       	adiw	r28, 0x0a	; 10
     b3a:	4f ae       	std	Y+63, r4	; 0x3f
     b3c:	2a 97       	sbiw	r28, 0x0a	; 10
     b3e:	2b 96       	adiw	r28, 0x0b	; 11
     b40:	9f af       	std	Y+63, r25	; 0x3f
     b42:	2b 97       	sbiw	r28, 0x0b	; 11
     b44:	65 96       	adiw	r28, 0x15	; 21
     b46:	0e ad       	ldd	r16, Y+62	; 0x3e
     b48:	1f ad       	ldd	r17, Y+63	; 0x3f
     b4a:	65 97       	sbiw	r28, 0x15	; 21
     b4c:	2f 96       	adiw	r28, 0x0f	; 15
     b4e:	ee ad       	ldd	r30, Y+62	; 0x3e
     b50:	ff ad       	ldd	r31, Y+63	; 0x3f
     b52:	2f 97       	sbiw	r28, 0x0f	; 15
     b54:	7f 97       	sbiw	r30, 0x1f	; 31
     b56:	29 96       	adiw	r28, 0x09	; 9
     b58:	ff af       	std	Y+63, r31	; 0x3f
     b5a:	ee af       	std	Y+62, r30	; 0x3e
     b5c:	29 97       	sbiw	r28, 0x09	; 9
		EEPROM_write(0,0,num_to_str(z+1));
		int overall_start_loc = (z*10)+41;
		int rem_start_loc = (z*10)+1;
		long curr_sum = atoi(EEPROM_read(overall_start_loc,overall_start_loc+9));
		for(int i = totals[z]; i>0;){
			start_lcd();
     b5e:	0e 94 24 01 	call	0x248	; 0x248 <start_lcd>
			sprintf(message,"MANUFACTURING...%d",i);
     b62:	00 d0       	rcall	.+0      	; 0xb64 <manufacture+0x1ce>
     b64:	00 d0       	rcall	.+0      	; 0xb66 <manufacture+0x1d0>
     b66:	00 d0       	rcall	.+0      	; 0xb68 <manufacture+0x1d2>
     b68:	ed b7       	in	r30, 0x3d	; 61
     b6a:	fe b7       	in	r31, 0x3e	; 62
     b6c:	31 96       	adiw	r30, 0x01	; 1
     b6e:	ad b7       	in	r26, 0x3d	; 61
     b70:	be b7       	in	r27, 0x3e	; 62
     b72:	12 96       	adiw	r26, 0x02	; 2
     b74:	9c 92       	st	X, r9
     b76:	8e 92       	st	-X, r8
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	2f ed       	ldi	r18, 0xDF	; 223
     b7c:	32 e0       	ldi	r19, 0x02	; 2
     b7e:	33 83       	std	Z+3, r19	; 0x03
     b80:	22 83       	std	Z+2, r18	; 0x02
     b82:	f5 82       	std	Z+5, r15	; 0x05
     b84:	e4 82       	std	Z+4, r14	; 0x04
     b86:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sprintf>
	print(t, 1);
	_delay_ms(1500);
	clear();
}

void manufacture(int z){
     b8a:	2a 96       	adiw	r28, 0x0a	; 10
     b8c:	6f ac       	ldd	r6, Y+63	; 0x3f
     b8e:	2a 97       	sbiw	r28, 0x0a	; 10
     b90:	2b 96       	adiw	r28, 0x0b	; 11
     b92:	7f ac       	ldd	r7, Y+63	; 0x3f
     b94:	2b 97       	sbiw	r28, 0x0b	; 11
		int rem_start_loc = (z*10)+1;
		long curr_sum = atoi(EEPROM_read(overall_start_loc,overall_start_loc+9));
		for(int i = totals[z]; i>0;){
			start_lcd();
			sprintf(message,"MANUFACTURING...%d",i);
			strcat(message,size[z]);
     b96:	4d b7       	in	r20, 0x3d	; 61
     b98:	5e b7       	in	r21, 0x3e	; 62
     b9a:	4a 5f       	subi	r20, 0xFA	; 250
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	5e bf       	out	0x3e, r21	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	4d bf       	out	0x3d, r20	; 61
     ba8:	d2 01       	movw	r26, r4
     baa:	6d 91       	ld	r22, X+
     bac:	7c 91       	ld	r23, X
     bae:	83 2d       	mov	r24, r3
     bb0:	92 2d       	mov	r25, r2
     bb2:	0e 94 31 07 	call	0xe62	; 0xe62 <strcat>
			strcat(message," remaining");
     bb6:	d4 01       	movw	r26, r8
     bb8:	0d 90       	ld	r0, X+
     bba:	00 20       	and	r0, r0
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <manufacture+0x222>
     bbe:	11 97       	sbiw	r26, 0x01	; 1
     bc0:	e2 ef       	ldi	r30, 0xF2	; 242
     bc2:	f2 e0       	ldi	r31, 0x02	; 2
     bc4:	8b e0       	ldi	r24, 0x0B	; 11
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	81 50       	subi	r24, 0x01	; 1
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <manufacture+0x230>
			
			char* l[] = {message};
     bce:	3d ae       	std	Y+61, r3	; 0x3d
     bd0:	2e ae       	std	Y+62, r2	; 0x3e
			int m[] = {1};
     bd2:	e1 e0       	ldi	r30, 0x01	; 1
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	21 96       	adiw	r28, 0x01	; 1
     bd8:	ff af       	std	Y+63, r31	; 0x3f
     bda:	ee af       	std	Y+62, r30	; 0x3e
     bdc:	21 97       	sbiw	r28, 0x01	; 1
			print1(l,m,1);
     bde:	ce 01       	movw	r24, r28
     be0:	cd 96       	adiw	r24, 0x3d	; 61
     be2:	6a 96       	adiw	r28, 0x1a	; 26
     be4:	6f ad       	ldd	r22, Y+63	; 0x3f
     be6:	6a 97       	sbiw	r28, 0x1a	; 26
     be8:	6b 96       	adiw	r28, 0x1b	; 27
     bea:	7f ad       	ldd	r23, Y+63	; 0x3f
     bec:	6b 97       	sbiw	r28, 0x1b	; 27
     bee:	68 96       	adiw	r28, 0x18	; 24
     bf0:	4f ad       	ldd	r20, Y+63	; 0x3f
     bf2:	68 97       	sbiw	r28, 0x18	; 24
     bf4:	69 96       	adiw	r28, 0x19	; 25
     bf6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf8:	69 97       	sbiw	r28, 0x19	; 25
     bfa:	0e 94 41 01 	call	0x282	; 0x282 <print1>
			
			for (int a=0; a<times[z]; a++){
     bfe:	65 96       	adiw	r28, 0x15	; 21
     c00:	ae ad       	ldd	r26, Y+62	; 0x3e
     c02:	bf ad       	ldd	r27, Y+63	; 0x3f
     c04:	65 97       	sbiw	r28, 0x15	; 21
     c06:	8d 91       	ld	r24, X+
     c08:	9c 91       	ld	r25, X
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	18 16       	cp	r1, r24
     c0e:	19 06       	cpc	r1, r25
     c10:	bc f4       	brge	.+46     	; 0xc40 <manufacture+0x2aa>
     c12:	2c 96       	adiw	r28, 0x0c	; 12
     c14:	8f ad       	ldd	r24, Y+63	; 0x3f
     c16:	2c 97       	sbiw	r28, 0x0c	; 12
     c18:	2d 96       	adiw	r28, 0x0d	; 13
     c1a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c1c:	2d 97       	sbiw	r28, 0x0d	; 13
     c1e:	f8 01       	movw	r30, r16
     c20:	2f e3       	ldi	r18, 0x3F	; 63
     c22:	3d e0       	ldi	r19, 0x0D	; 13
     c24:	43 e0       	ldi	r20, 0x03	; 3
     c26:	21 50       	subi	r18, 0x01	; 1
     c28:	30 40       	sbci	r19, 0x00	; 0
     c2a:	40 40       	sbci	r20, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <manufacture+0x290>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <manufacture+0x29a>
     c30:	00 00       	nop
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	82 17       	cp	r24, r18
     c3a:	93 07       	cpc	r25, r19
     c3c:	8c f3       	brlt	.-30     	; 0xc20 <manufacture+0x28a>
     c3e:	8f 01       	movw	r16, r30
				_delay_ms(1000);
			}
			EEPROM_write(rem_start_loc,rem_start_loc+9,num_to_str(--i));
     c40:	08 94       	sec
     c42:	e1 08       	sbc	r14, r1
     c44:	f1 08       	sbc	r15, r1
     c46:	b7 01       	movw	r22, r14
     c48:	88 27       	eor	r24, r24
     c4a:	77 fd       	sbrc	r23, 7
     c4c:	80 95       	com	r24
     c4e:	98 2f       	mov	r25, r24
     c50:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <num_to_str>
     c54:	ac 01       	movw	r20, r24
     c56:	23 96       	adiw	r28, 0x03	; 3
     c58:	8e ad       	ldd	r24, Y+62	; 0x3e
     c5a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c5c:	23 97       	sbiw	r28, 0x03	; 3
     c5e:	29 96       	adiw	r28, 0x09	; 9
     c60:	6e ad       	ldd	r22, Y+62	; 0x3e
     c62:	7f ad       	ldd	r23, Y+63	; 0x3f
     c64:	29 97       	sbiw	r28, 0x09	; 9
     c66:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
			EEPROM_write(overall_start_loc,overall_start_loc+9,num_to_str(++curr_sum));
     c6a:	08 94       	sec
     c6c:	a1 1c       	adc	r10, r1
     c6e:	b1 1c       	adc	r11, r1
     c70:	c1 1c       	adc	r12, r1
     c72:	d1 1c       	adc	r13, r1
     c74:	c6 01       	movw	r24, r12
     c76:	b5 01       	movw	r22, r10
     c78:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <num_to_str>
     c7c:	ac 01       	movw	r20, r24
     c7e:	24 96       	adiw	r28, 0x04	; 4
     c80:	8f ad       	ldd	r24, Y+63	; 0x3f
     c82:	24 97       	sbiw	r28, 0x04	; 4
     c84:	25 96       	adiw	r28, 0x05	; 5
     c86:	9f ad       	ldd	r25, Y+63	; 0x3f
     c88:	25 97       	sbiw	r28, 0x05	; 5
     c8a:	26 96       	adiw	r28, 0x06	; 6
     c8c:	6f ad       	ldd	r22, Y+63	; 0x3f
     c8e:	26 97       	sbiw	r28, 0x06	; 6
     c90:	27 96       	adiw	r28, 0x07	; 7
     c92:	7f ad       	ldd	r23, Y+63	; 0x3f
     c94:	27 97       	sbiw	r28, 0x07	; 7
     c96:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
			if(i==0){
     c9a:	e1 14       	cp	r14, r1
     c9c:	f1 04       	cpc	r15, r1
     c9e:	29 f5       	brne	.+74     	; 0xcea <manufacture+0x354>
				clear();
     ca0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
				strcpy(message,size[z]);
     ca4:	d3 01       	movw	r26, r6
     ca6:	6d 91       	ld	r22, X+
     ca8:	7c 91       	ld	r23, X
     caa:	83 2d       	mov	r24, r3
     cac:	92 2d       	mov	r25, r2
     cae:	0e 94 3c 07 	call	0xe78	; 0xe78 <strcpy>
				strcat(message," complete");
     cb2:	d4 01       	movw	r26, r8
     cb4:	0d 90       	ld	r0, X+
     cb6:	00 20       	and	r0, r0
     cb8:	e9 f7       	brne	.-6      	; 0xcb4 <manufacture+0x31e>
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	ed ef       	ldi	r30, 0xFD	; 253
     cbe:	f2 e0       	ldi	r31, 0x02	; 2
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	01 90       	ld	r0, Z+
     cc4:	0d 92       	st	X+, r0
     cc6:	81 50       	subi	r24, 0x01	; 1
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <manufacture+0x32c>
				print(message,1);
     cca:	83 2d       	mov	r24, r3
     ccc:	92 2d       	mov	r25, r2
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     cd6:	2f e9       	ldi	r18, 0x9F	; 159
     cd8:	36 e8       	ldi	r19, 0x86	; 134
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	21 50       	subi	r18, 0x01	; 1
     cde:	30 40       	sbci	r19, 0x00	; 0
     ce0:	40 40       	sbci	r20, 0x00	; 0
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <manufacture+0x346>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <manufacture+0x350>
     ce6:	00 00       	nop
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <manufacture+0x35c>
	for (; z<3; z++){
		EEPROM_write(0,0,num_to_str(z+1));
		int overall_start_loc = (z*10)+41;
		int rem_start_loc = (z*10)+1;
		long curr_sum = atoi(EEPROM_read(overall_start_loc,overall_start_loc+9));
		for(int i = totals[z]; i>0;){
     cea:	1e 14       	cp	r1, r14
     cec:	1f 04       	cpc	r1, r15
     cee:	0c f4       	brge	.+2      	; 0xcf2 <manufacture+0x35c>
     cf0:	36 cf       	rjmp	.-404    	; 0xb5e <manufacture+0x1c8>
				strcat(message," complete");
				print(message,1);
				_delay_ms(500);
			}
		}
		clear();
     cf2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <clear>
		print("Packing has started",1);
     cf6:	87 e0       	ldi	r24, 0x07	; 7
     cf8:	93 e0       	ldi	r25, 0x03	; 3
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <print>
     d02:	2f 96       	adiw	r28, 0x0f	; 15
     d04:	4e ad       	ldd	r20, Y+62	; 0x3e
     d06:	5f ad       	ldd	r21, Y+63	; 0x3f
     d08:	2f 97       	sbiw	r28, 0x0f	; 15
     d0a:	46 5f       	subi	r20, 0xF6	; 246
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	2f 96       	adiw	r28, 0x0f	; 15
     d10:	5f af       	std	Y+63, r21	; 0x3f
     d12:	4e af       	std	Y+62, r20	; 0x3e
     d14:	2f 97       	sbiw	r28, 0x0f	; 15
     d16:	61 96       	adiw	r28, 0x11	; 17
     d18:	8e ad       	ldd	r24, Y+62	; 0x3e
     d1a:	9f ad       	ldd	r25, Y+63	; 0x3f
     d1c:	61 97       	sbiw	r28, 0x11	; 17
     d1e:	0a 96       	adiw	r24, 0x0a	; 10
     d20:	61 96       	adiw	r28, 0x11	; 17
     d22:	9f af       	std	Y+63, r25	; 0x3f
     d24:	8e af       	std	Y+62, r24	; 0x3e
     d26:	61 97       	sbiw	r28, 0x11	; 17
     d28:	a2 e0       	ldi	r26, 0x02	; 2
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	4a 0e       	add	r4, r26
     d2e:	5b 1e       	adc	r5, r27
     d30:	65 96       	adiw	r28, 0x15	; 21
     d32:	ee ad       	ldd	r30, Y+62	; 0x3e
     d34:	ff ad       	ldd	r31, Y+63	; 0x3f
     d36:	65 97       	sbiw	r28, 0x15	; 21
     d38:	32 96       	adiw	r30, 0x02	; 2
     d3a:	65 96       	adiw	r28, 0x15	; 21
     d3c:	ff af       	std	Y+63, r31	; 0x3f
     d3e:	ee af       	std	Y+62, r30	; 0x3e
     d40:	65 97       	sbiw	r28, 0x15	; 21
}

void manufacture(int z){
	PORTC =0x00000100;
	char message[60];
	for (; z<3; z++){
     d42:	63 96       	adiw	r28, 0x13	; 19
     d44:	2e ad       	ldd	r18, Y+62	; 0x3e
     d46:	3f ad       	ldd	r19, Y+63	; 0x3f
     d48:	63 97       	sbiw	r28, 0x13	; 19
     d4a:	23 30       	cpi	r18, 0x03	; 3
     d4c:	31 05       	cpc	r19, r1
     d4e:	0c f4       	brge	.+2      	; 0xd52 <manufacture+0x3bc>
     d50:	9a ce       	rjmp	.-716    	; 0xa86 <manufacture+0xf0>
			}
		}
		clear();
		print("Packing has started",1);
	}
	EEPROM_write(0,0,"0");
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	4b e1       	ldi	r20, 0x1B	; 27
     d5c:	53 e0       	ldi	r21, 0x03	; 3
     d5e:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
}
     d62:	c6 5a       	subi	r28, 0xA6	; 166
     d64:	df 4f       	sbci	r29, 0xFF	; 255
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	bf 90       	pop	r11
     d82:	af 90       	pop	r10
     d84:	9f 90       	pop	r9
     d86:	8f 90       	pop	r8
     d88:	7f 90       	pop	r7
     d8a:	6f 90       	pop	r6
     d8c:	5f 90       	pop	r5
     d8e:	4f 90       	pop	r4
     d90:	3f 90       	pop	r3
     d92:	2f 90       	pop	r2
     d94:	08 95       	ret

00000d96 <init>:

void init(){
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
	char* y = EEPROM_read(0,0);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	0e 94 bb 00 	call	0x176	; 0x176 <EEPROM_read>
	if (!isdigit(y[0])){
     daa:	fc 01       	movw	r30, r24
     dac:	20 81       	ld	r18, Z
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	20 53       	subi	r18, 0x30	; 48
     db2:	30 40       	sbci	r19, 0x00	; 0
     db4:	2a 30       	cpi	r18, 0x0A	; 10
     db6:	31 05       	cpc	r19, r1
     db8:	80 f0       	brcs	.+32     	; 0xdda <init+0x44>
     dba:	c0 e0       	ldi	r28, 0x00	; 0
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i=0; i<10; i++){
			EEPROM_write(10*i,9+(10*i),"0");
     dbe:	0b e1       	ldi	r16, 0x1B	; 27
     dc0:	13 e0       	ldi	r17, 0x03	; 3
		print("Packing has started",1);
	}
	EEPROM_write(0,0,"0");
}

void init(){
     dc2:	be 01       	movw	r22, r28
     dc4:	67 5f       	subi	r22, 0xF7	; 247
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
	char* y = EEPROM_read(0,0);
	if (!isdigit(y[0])){
		for(int i=0; i<10; i++){
			EEPROM_write(10*i,9+(10*i),"0");
     dc8:	ce 01       	movw	r24, r28
     dca:	a8 01       	movw	r20, r16
     dcc:	0e 94 93 00 	call	0x126	; 0x126 <EEPROM_write>
     dd0:	2a 96       	adiw	r28, 0x0a	; 10
}

void init(){
	char* y = EEPROM_read(0,0);
	if (!isdigit(y[0])){
		for(int i=0; i<10; i++){
     dd2:	c4 36       	cpi	r28, 0x64	; 100
     dd4:	d1 05       	cpc	r29, r1
     dd6:	a9 f7       	brne	.-22     	; 0xdc2 <init+0x2c>
     dd8:	0c c0       	rjmp	.+24     	; 0xdf2 <init+0x5c>
			EEPROM_write(10*i,9+(10*i),"0");
		}
	}
	else{
		short state = atoi(y);
     dda:	0e 94 13 07 	call	0xe26	; 0xe26 <atoi>
     dde:	ec 01       	movw	r28, r24
		if (state>0){
     de0:	18 16       	cp	r1, r24
     de2:	19 06       	cpc	r1, r25
     de4:	34 f4       	brge	.+12     	; 0xdf2 <init+0x5c>
			load_config();
     de6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <load_config>
			manufacture(state-1);
     dea:	ce 01       	movw	r24, r28
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	0e 94 cb 04 	call	0x996	; 0x996 <manufacture>
		}
	}
	
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <main>:

int main(void){	
	DDRC = 0xff;
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00;
     e00:	1a b8       	out	0x0a, r1	; 10
	DDRG = 0xff;
     e02:	83 bb       	out	0x13, r24	; 19
	DDRH = 0xff;
     e04:	80 93 01 01 	sts	0x0101, r24
	DDRK = 0xff;
     e08:	80 93 07 01 	sts	0x0107, r24
	DDRJ = 0x00;
     e0c:	10 92 04 01 	sts	0x0104, r1
	
	
	start_lcd();
     e10:	0e 94 24 01 	call	0x248	; 0x248 <start_lcd>
	//initializing the eeprom from addr 0 to 100 with default zero values
	init();
     e14:	0e 94 cb 06 	call	0xd96	; 0xd96 <init>
	
	config();
     e18:	0e 94 48 03 	call	0x690	; 0x690 <config>
	manufacture(0);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 cb 04 	call	0x996	; 0x996 <manufacture>
     e24:	ff cf       	rjmp	.-2      	; 0xe24 <main+0x28>

00000e26 <atoi>:
     e26:	fc 01       	movw	r30, r24
     e28:	88 27       	eor	r24, r24
     e2a:	99 27       	eor	r25, r25
     e2c:	e8 94       	clt
     e2e:	21 91       	ld	r18, Z+
     e30:	20 32       	cpi	r18, 0x20	; 32
     e32:	e9 f3       	breq	.-6      	; 0xe2e <atoi+0x8>
     e34:	29 30       	cpi	r18, 0x09	; 9
     e36:	10 f0       	brcs	.+4      	; 0xe3c <atoi+0x16>
     e38:	2e 30       	cpi	r18, 0x0E	; 14
     e3a:	c8 f3       	brcs	.-14     	; 0xe2e <atoi+0x8>
     e3c:	2b 32       	cpi	r18, 0x2B	; 43
     e3e:	41 f0       	breq	.+16     	; 0xe50 <atoi+0x2a>
     e40:	2d 32       	cpi	r18, 0x2D	; 45
     e42:	39 f4       	brne	.+14     	; 0xe52 <atoi+0x2c>
     e44:	68 94       	set
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <atoi+0x2a>
     e48:	0e 94 53 07 	call	0xea6	; 0xea6 <__mulhi_const_10>
     e4c:	82 0f       	add	r24, r18
     e4e:	91 1d       	adc	r25, r1
     e50:	21 91       	ld	r18, Z+
     e52:	20 53       	subi	r18, 0x30	; 48
     e54:	2a 30       	cpi	r18, 0x0A	; 10
     e56:	c0 f3       	brcs	.-16     	; 0xe48 <atoi+0x22>
     e58:	1e f4       	brtc	.+6      	; 0xe60 <atoi+0x3a>
     e5a:	90 95       	com	r25
     e5c:	81 95       	neg	r24
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	08 95       	ret

00000e62 <strcat>:
     e62:	fb 01       	movw	r30, r22
     e64:	dc 01       	movw	r26, r24
     e66:	0d 90       	ld	r0, X+
     e68:	00 20       	and	r0, r0
     e6a:	e9 f7       	brne	.-6      	; 0xe66 <strcat+0x4>
     e6c:	11 97       	sbiw	r26, 0x01	; 1
     e6e:	01 90       	ld	r0, Z+
     e70:	0d 92       	st	X+, r0
     e72:	00 20       	and	r0, r0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <strcat+0xc>
     e76:	08 95       	ret

00000e78 <strcpy>:
     e78:	fb 01       	movw	r30, r22
     e7a:	dc 01       	movw	r26, r24
     e7c:	01 90       	ld	r0, Z+
     e7e:	0d 92       	st	X+, r0
     e80:	00 20       	and	r0, r0
     e82:	e1 f7       	brne	.-8      	; 0xe7c <strcpy+0x4>
     e84:	08 95       	ret

00000e86 <strncat>:
     e86:	fb 01       	movw	r30, r22
     e88:	dc 01       	movw	r26, r24
     e8a:	0d 90       	ld	r0, X+
     e8c:	00 20       	and	r0, r0
     e8e:	e9 f7       	brne	.-6      	; 0xe8a <strncat+0x4>
     e90:	11 97       	sbiw	r26, 0x01	; 1
     e92:	41 50       	subi	r20, 0x01	; 1
     e94:	50 40       	sbci	r21, 0x00	; 0
     e96:	28 f0       	brcs	.+10     	; 0xea2 <strncat+0x1c>
     e98:	01 90       	ld	r0, Z+
     e9a:	00 20       	and	r0, r0
     e9c:	0d 92       	st	X+, r0
     e9e:	c9 f7       	brne	.-14     	; 0xe92 <strncat+0xc>
     ea0:	08 95       	ret
     ea2:	1c 92       	st	X, r1
     ea4:	08 95       	ret

00000ea6 <__mulhi_const_10>:
     ea6:	7a e0       	ldi	r23, 0x0A	; 10
     ea8:	97 9f       	mul	r25, r23
     eaa:	90 2d       	mov	r25, r0
     eac:	87 9f       	mul	r24, r23
     eae:	80 2d       	mov	r24, r0
     eb0:	91 0d       	add	r25, r1
     eb2:	11 24       	eor	r1, r1
     eb4:	08 95       	ret

00000eb6 <sprintf>:
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	2e 97       	sbiw	r28, 0x0e	; 14
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	0d 89       	ldd	r16, Y+21	; 0x15
     ed0:	1e 89       	ldd	r17, Y+22	; 0x16
     ed2:	86 e0       	ldi	r24, 0x06	; 6
     ed4:	8c 83       	std	Y+4, r24	; 0x04
     ed6:	1a 83       	std	Y+2, r17	; 0x02
     ed8:	09 83       	std	Y+1, r16	; 0x01
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f e7       	ldi	r25, 0x7F	; 127
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	8d 83       	std	Y+5, r24	; 0x05
     ee2:	9e 01       	movw	r18, r28
     ee4:	27 5e       	subi	r18, 0xE7	; 231
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	ce 01       	movw	r24, r28
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	6f 89       	ldd	r22, Y+23	; 0x17
     eee:	78 8d       	ldd	r23, Y+24	; 0x18
     ef0:	a9 01       	movw	r20, r18
     ef2:	0e 94 8b 07 	call	0xf16	; 0xf16 <vfprintf>
     ef6:	ef 81       	ldd	r30, Y+7	; 0x07
     ef8:	f8 85       	ldd	r31, Y+8	; 0x08
     efa:	e0 0f       	add	r30, r16
     efc:	f1 1f       	adc	r31, r17
     efe:	10 82       	st	Z, r1
     f00:	2e 96       	adiw	r28, 0x0e	; 14
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <vfprintf>:
     f16:	2f 92       	push	r2
     f18:	3f 92       	push	r3
     f1a:	4f 92       	push	r4
     f1c:	5f 92       	push	r5
     f1e:	6f 92       	push	r6
     f20:	7f 92       	push	r7
     f22:	8f 92       	push	r8
     f24:	9f 92       	push	r9
     f26:	af 92       	push	r10
     f28:	bf 92       	push	r11
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	2c 97       	sbiw	r28, 0x0c	; 12
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	6c 01       	movw	r12, r24
     f4c:	1b 01       	movw	r2, r22
     f4e:	8a 01       	movw	r16, r20
     f50:	fc 01       	movw	r30, r24
     f52:	17 82       	std	Z+7, r1	; 0x07
     f54:	16 82       	std	Z+6, r1	; 0x06
     f56:	83 81       	ldd	r24, Z+3	; 0x03
     f58:	81 ff       	sbrs	r24, 1
     f5a:	d1 c1       	rjmp	.+930    	; 0x12fe <vfprintf+0x3e8>
     f5c:	2e 01       	movw	r4, r28
     f5e:	08 94       	sec
     f60:	41 1c       	adc	r4, r1
     f62:	51 1c       	adc	r5, r1
     f64:	f6 01       	movw	r30, r12
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	f1 01       	movw	r30, r2
     f6a:	93 fd       	sbrc	r25, 3
     f6c:	85 91       	lpm	r24, Z+
     f6e:	93 ff       	sbrs	r25, 3
     f70:	81 91       	ld	r24, Z+
     f72:	1f 01       	movw	r2, r30
     f74:	88 23       	and	r24, r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <vfprintf+0x64>
     f78:	be c1       	rjmp	.+892    	; 0x12f6 <vfprintf+0x3e0>
     f7a:	85 32       	cpi	r24, 0x25	; 37
     f7c:	39 f4       	brne	.+14     	; 0xf8c <vfprintf+0x76>
     f7e:	93 fd       	sbrc	r25, 3
     f80:	85 91       	lpm	r24, Z+
     f82:	93 ff       	sbrs	r25, 3
     f84:	81 91       	ld	r24, Z+
     f86:	1f 01       	movw	r2, r30
     f88:	85 32       	cpi	r24, 0x25	; 37
     f8a:	29 f4       	brne	.+10     	; 0xf96 <vfprintf+0x80>
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	b6 01       	movw	r22, r12
     f90:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
     f94:	e7 cf       	rjmp	.-50     	; 0xf64 <vfprintf+0x4e>
     f96:	ee 24       	eor	r14, r14
     f98:	ff 24       	eor	r15, r15
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	20 32       	cpi	r18, 0x20	; 32
     f9e:	b0 f4       	brcc	.+44     	; 0xfcc <vfprintf+0xb6>
     fa0:	8b 32       	cpi	r24, 0x2B	; 43
     fa2:	69 f0       	breq	.+26     	; 0xfbe <vfprintf+0xa8>
     fa4:	8c 32       	cpi	r24, 0x2C	; 44
     fa6:	28 f4       	brcc	.+10     	; 0xfb2 <vfprintf+0x9c>
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	51 f0       	breq	.+20     	; 0xfc0 <vfprintf+0xaa>
     fac:	83 32       	cpi	r24, 0x23	; 35
     fae:	71 f4       	brne	.+28     	; 0xfcc <vfprintf+0xb6>
     fb0:	0b c0       	rjmp	.+22     	; 0xfc8 <vfprintf+0xb2>
     fb2:	8d 32       	cpi	r24, 0x2D	; 45
     fb4:	39 f0       	breq	.+14     	; 0xfc4 <vfprintf+0xae>
     fb6:	80 33       	cpi	r24, 0x30	; 48
     fb8:	49 f4       	brne	.+18     	; 0xfcc <vfprintf+0xb6>
     fba:	21 60       	ori	r18, 0x01	; 1
     fbc:	2c c0       	rjmp	.+88     	; 0x1016 <vfprintf+0x100>
     fbe:	22 60       	ori	r18, 0x02	; 2
     fc0:	24 60       	ori	r18, 0x04	; 4
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <vfprintf+0x100>
     fc4:	28 60       	ori	r18, 0x08	; 8
     fc6:	27 c0       	rjmp	.+78     	; 0x1016 <vfprintf+0x100>
     fc8:	20 61       	ori	r18, 0x10	; 16
     fca:	25 c0       	rjmp	.+74     	; 0x1016 <vfprintf+0x100>
     fcc:	27 fd       	sbrc	r18, 7
     fce:	2c c0       	rjmp	.+88     	; 0x1028 <vfprintf+0x112>
     fd0:	38 2f       	mov	r19, r24
     fd2:	30 53       	subi	r19, 0x30	; 48
     fd4:	3a 30       	cpi	r19, 0x0A	; 10
     fd6:	98 f4       	brcc	.+38     	; 0xffe <vfprintf+0xe8>
     fd8:	26 ff       	sbrs	r18, 6
     fda:	08 c0       	rjmp	.+16     	; 0xfec <vfprintf+0xd6>
     fdc:	8e 2d       	mov	r24, r14
     fde:	88 0f       	add	r24, r24
     fe0:	e8 2e       	mov	r14, r24
     fe2:	ee 0c       	add	r14, r14
     fe4:	ee 0c       	add	r14, r14
     fe6:	e8 0e       	add	r14, r24
     fe8:	e3 0e       	add	r14, r19
     fea:	15 c0       	rjmp	.+42     	; 0x1016 <vfprintf+0x100>
     fec:	8f 2d       	mov	r24, r15
     fee:	88 0f       	add	r24, r24
     ff0:	f8 2e       	mov	r15, r24
     ff2:	ff 0c       	add	r15, r15
     ff4:	ff 0c       	add	r15, r15
     ff6:	f8 0e       	add	r15, r24
     ff8:	f3 0e       	add	r15, r19
     ffa:	20 62       	ori	r18, 0x20	; 32
     ffc:	0c c0       	rjmp	.+24     	; 0x1016 <vfprintf+0x100>
     ffe:	8e 32       	cpi	r24, 0x2E	; 46
    1000:	21 f4       	brne	.+8      	; 0x100a <vfprintf+0xf4>
    1002:	26 fd       	sbrc	r18, 6
    1004:	78 c1       	rjmp	.+752    	; 0x12f6 <vfprintf+0x3e0>
    1006:	20 64       	ori	r18, 0x40	; 64
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <vfprintf+0x100>
    100a:	8c 36       	cpi	r24, 0x6C	; 108
    100c:	11 f4       	brne	.+4      	; 0x1012 <vfprintf+0xfc>
    100e:	20 68       	ori	r18, 0x80	; 128
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <vfprintf+0x100>
    1012:	88 36       	cpi	r24, 0x68	; 104
    1014:	49 f4       	brne	.+18     	; 0x1028 <vfprintf+0x112>
    1016:	f1 01       	movw	r30, r2
    1018:	93 fd       	sbrc	r25, 3
    101a:	85 91       	lpm	r24, Z+
    101c:	93 ff       	sbrs	r25, 3
    101e:	81 91       	ld	r24, Z+
    1020:	1f 01       	movw	r2, r30
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <vfprintf+0x112>
    1026:	ba cf       	rjmp	.-140    	; 0xf9c <vfprintf+0x86>
    1028:	98 2f       	mov	r25, r24
    102a:	95 54       	subi	r25, 0x45	; 69
    102c:	93 30       	cpi	r25, 0x03	; 3
    102e:	18 f0       	brcs	.+6      	; 0x1036 <vfprintf+0x120>
    1030:	90 52       	subi	r25, 0x20	; 32
    1032:	93 30       	cpi	r25, 0x03	; 3
    1034:	28 f4       	brcc	.+10     	; 0x1040 <vfprintf+0x12a>
    1036:	0c 5f       	subi	r16, 0xFC	; 252
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	ff e3       	ldi	r31, 0x3F	; 63
    103c:	f9 83       	std	Y+1, r31	; 0x01
    103e:	0d c0       	rjmp	.+26     	; 0x105a <vfprintf+0x144>
    1040:	83 36       	cpi	r24, 0x63	; 99
    1042:	31 f0       	breq	.+12     	; 0x1050 <vfprintf+0x13a>
    1044:	83 37       	cpi	r24, 0x73	; 115
    1046:	71 f0       	breq	.+28     	; 0x1064 <vfprintf+0x14e>
    1048:	83 35       	cpi	r24, 0x53	; 83
    104a:	09 f0       	breq	.+2      	; 0x104e <vfprintf+0x138>
    104c:	60 c0       	rjmp	.+192    	; 0x110e <vfprintf+0x1f8>
    104e:	22 c0       	rjmp	.+68     	; 0x1094 <vfprintf+0x17e>
    1050:	f8 01       	movw	r30, r16
    1052:	80 81       	ld	r24, Z
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	0e 5f       	subi	r16, 0xFE	; 254
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	42 01       	movw	r8, r4
    105c:	71 e0       	ldi	r23, 0x01	; 1
    105e:	a7 2e       	mov	r10, r23
    1060:	b1 2c       	mov	r11, r1
    1062:	16 c0       	rjmp	.+44     	; 0x1090 <vfprintf+0x17a>
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	66 2e       	mov	r6, r22
    1068:	71 2c       	mov	r7, r1
    106a:	60 0e       	add	r6, r16
    106c:	71 1e       	adc	r7, r17
    106e:	f8 01       	movw	r30, r16
    1070:	80 80       	ld	r8, Z
    1072:	91 80       	ldd	r9, Z+1	; 0x01
    1074:	26 ff       	sbrs	r18, 6
    1076:	03 c0       	rjmp	.+6      	; 0x107e <vfprintf+0x168>
    1078:	6e 2d       	mov	r22, r14
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0x16c>
    107e:	6f ef       	ldi	r22, 0xFF	; 255
    1080:	7f ef       	ldi	r23, 0xFF	; 255
    1082:	c4 01       	movw	r24, r8
    1084:	2c 87       	std	Y+12, r18	; 0x0c
    1086:	0e 94 a6 09 	call	0x134c	; 0x134c <strnlen>
    108a:	5c 01       	movw	r10, r24
    108c:	83 01       	movw	r16, r6
    108e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1090:	2f 77       	andi	r18, 0x7F	; 127
    1092:	17 c0       	rjmp	.+46     	; 0x10c2 <vfprintf+0x1ac>
    1094:	52 e0       	ldi	r21, 0x02	; 2
    1096:	65 2e       	mov	r6, r21
    1098:	71 2c       	mov	r7, r1
    109a:	60 0e       	add	r6, r16
    109c:	71 1e       	adc	r7, r17
    109e:	f8 01       	movw	r30, r16
    10a0:	80 80       	ld	r8, Z
    10a2:	91 80       	ldd	r9, Z+1	; 0x01
    10a4:	26 ff       	sbrs	r18, 6
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <vfprintf+0x198>
    10a8:	6e 2d       	mov	r22, r14
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <vfprintf+0x19c>
    10ae:	6f ef       	ldi	r22, 0xFF	; 255
    10b0:	7f ef       	ldi	r23, 0xFF	; 255
    10b2:	c4 01       	movw	r24, r8
    10b4:	2c 87       	std	Y+12, r18	; 0x0c
    10b6:	0e 94 9b 09 	call	0x1336	; 0x1336 <strnlen_P>
    10ba:	5c 01       	movw	r10, r24
    10bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    10be:	20 68       	ori	r18, 0x80	; 128
    10c0:	83 01       	movw	r16, r6
    10c2:	23 fd       	sbrc	r18, 3
    10c4:	20 c0       	rjmp	.+64     	; 0x1106 <vfprintf+0x1f0>
    10c6:	08 c0       	rjmp	.+16     	; 0x10d8 <vfprintf+0x1c2>
    10c8:	80 e2       	ldi	r24, 0x20	; 32
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	b6 01       	movw	r22, r12
    10ce:	2c 87       	std	Y+12, r18	; 0x0c
    10d0:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    10d4:	fa 94       	dec	r15
    10d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10d8:	8f 2d       	mov	r24, r15
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a8 16       	cp	r10, r24
    10de:	b9 06       	cpc	r11, r25
    10e0:	98 f3       	brcs	.-26     	; 0x10c8 <vfprintf+0x1b2>
    10e2:	11 c0       	rjmp	.+34     	; 0x1106 <vfprintf+0x1f0>
    10e4:	f4 01       	movw	r30, r8
    10e6:	27 fd       	sbrc	r18, 7
    10e8:	85 91       	lpm	r24, Z+
    10ea:	27 ff       	sbrs	r18, 7
    10ec:	81 91       	ld	r24, Z+
    10ee:	4f 01       	movw	r8, r30
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	b6 01       	movw	r22, r12
    10f4:	2c 87       	std	Y+12, r18	; 0x0c
    10f6:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    10fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    10fc:	f1 10       	cpse	r15, r1
    10fe:	fa 94       	dec	r15
    1100:	08 94       	sec
    1102:	a1 08       	sbc	r10, r1
    1104:	b1 08       	sbc	r11, r1
    1106:	a1 14       	cp	r10, r1
    1108:	b1 04       	cpc	r11, r1
    110a:	61 f7       	brne	.-40     	; 0x10e4 <vfprintf+0x1ce>
    110c:	f1 c0       	rjmp	.+482    	; 0x12f0 <vfprintf+0x3da>
    110e:	84 36       	cpi	r24, 0x64	; 100
    1110:	11 f0       	breq	.+4      	; 0x1116 <vfprintf+0x200>
    1112:	89 36       	cpi	r24, 0x69	; 105
    1114:	49 f5       	brne	.+82     	; 0x1168 <vfprintf+0x252>
    1116:	27 ff       	sbrs	r18, 7
    1118:	08 c0       	rjmp	.+16     	; 0x112a <vfprintf+0x214>
    111a:	f8 01       	movw	r30, r16
    111c:	60 81       	ld	r22, Z
    111e:	71 81       	ldd	r23, Z+1	; 0x01
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	0c 5f       	subi	r16, 0xFC	; 252
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
    1128:	09 c0       	rjmp	.+18     	; 0x113c <vfprintf+0x226>
    112a:	f8 01       	movw	r30, r16
    112c:	60 81       	ld	r22, Z
    112e:	71 81       	ldd	r23, Z+1	; 0x01
    1130:	88 27       	eor	r24, r24
    1132:	77 fd       	sbrc	r23, 7
    1134:	80 95       	com	r24
    1136:	98 2f       	mov	r25, r24
    1138:	0e 5f       	subi	r16, 0xFE	; 254
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	4f e6       	ldi	r20, 0x6F	; 111
    113e:	b4 2e       	mov	r11, r20
    1140:	b2 22       	and	r11, r18
    1142:	97 ff       	sbrs	r25, 7
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <vfprintf+0x242>
    1146:	90 95       	com	r25
    1148:	80 95       	com	r24
    114a:	70 95       	com	r23
    114c:	61 95       	neg	r22
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	f0 e8       	ldi	r31, 0x80	; 128
    1156:	bf 2a       	or	r11, r31
    1158:	a2 01       	movw	r20, r4
    115a:	2a e0       	ldi	r18, 0x0A	; 10
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__ultoa_invert>
    1162:	78 2e       	mov	r7, r24
    1164:	74 18       	sub	r7, r4
    1166:	45 c0       	rjmp	.+138    	; 0x11f2 <vfprintf+0x2dc>
    1168:	85 37       	cpi	r24, 0x75	; 117
    116a:	31 f4       	brne	.+12     	; 0x1178 <vfprintf+0x262>
    116c:	3f ee       	ldi	r19, 0xEF	; 239
    116e:	b3 2e       	mov	r11, r19
    1170:	b2 22       	and	r11, r18
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	25 c0       	rjmp	.+74     	; 0x11c2 <vfprintf+0x2ac>
    1178:	99 ef       	ldi	r25, 0xF9	; 249
    117a:	b9 2e       	mov	r11, r25
    117c:	b2 22       	and	r11, r18
    117e:	8f 36       	cpi	r24, 0x6F	; 111
    1180:	c1 f0       	breq	.+48     	; 0x11b2 <vfprintf+0x29c>
    1182:	80 37       	cpi	r24, 0x70	; 112
    1184:	20 f4       	brcc	.+8      	; 0x118e <vfprintf+0x278>
    1186:	88 35       	cpi	r24, 0x58	; 88
    1188:	09 f0       	breq	.+2      	; 0x118c <vfprintf+0x276>
    118a:	b5 c0       	rjmp	.+362    	; 0x12f6 <vfprintf+0x3e0>
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <vfprintf+0x292>
    118e:	80 37       	cpi	r24, 0x70	; 112
    1190:	21 f0       	breq	.+8      	; 0x119a <vfprintf+0x284>
    1192:	88 37       	cpi	r24, 0x78	; 120
    1194:	09 f0       	breq	.+2      	; 0x1198 <vfprintf+0x282>
    1196:	af c0       	rjmp	.+350    	; 0x12f6 <vfprintf+0x3e0>
    1198:	02 c0       	rjmp	.+4      	; 0x119e <vfprintf+0x288>
    119a:	20 e1       	ldi	r18, 0x10	; 16
    119c:	b2 2a       	or	r11, r18
    119e:	b4 fe       	sbrs	r11, 4
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <vfprintf+0x2a2>
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	b8 2a       	or	r11, r24
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <vfprintf+0x2a2>
    11a8:	b4 fe       	sbrs	r11, 4
    11aa:	09 c0       	rjmp	.+18     	; 0x11be <vfprintf+0x2a8>
    11ac:	e6 e0       	ldi	r30, 0x06	; 6
    11ae:	be 2a       	or	r11, r30
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <vfprintf+0x2a8>
    11b2:	28 e0       	ldi	r18, 0x08	; 8
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <vfprintf+0x2ac>
    11b8:	20 e1       	ldi	r18, 0x10	; 16
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0x2ac>
    11be:	20 e1       	ldi	r18, 0x10	; 16
    11c0:	32 e0       	ldi	r19, 0x02	; 2
    11c2:	b7 fe       	sbrs	r11, 7
    11c4:	08 c0       	rjmp	.+16     	; 0x11d6 <vfprintf+0x2c0>
    11c6:	f8 01       	movw	r30, r16
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	0c 5f       	subi	r16, 0xFC	; 252
    11d2:	1f 4f       	sbci	r17, 0xFF	; 255
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <vfprintf+0x2ce>
    11d6:	f8 01       	movw	r30, r16
    11d8:	60 81       	ld	r22, Z
    11da:	71 81       	ldd	r23, Z+1	; 0x01
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 5f       	subi	r16, 0xFE	; 254
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
    11e4:	a2 01       	movw	r20, r4
    11e6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__ultoa_invert>
    11ea:	78 2e       	mov	r7, r24
    11ec:	74 18       	sub	r7, r4
    11ee:	ff e7       	ldi	r31, 0x7F	; 127
    11f0:	bf 22       	and	r11, r31
    11f2:	b6 fe       	sbrs	r11, 6
    11f4:	0b c0       	rjmp	.+22     	; 0x120c <vfprintf+0x2f6>
    11f6:	2e ef       	ldi	r18, 0xFE	; 254
    11f8:	b2 22       	and	r11, r18
    11fa:	7e 14       	cp	r7, r14
    11fc:	38 f4       	brcc	.+14     	; 0x120c <vfprintf+0x2f6>
    11fe:	b4 fe       	sbrs	r11, 4
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <vfprintf+0x2fa>
    1202:	b2 fc       	sbrc	r11, 2
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <vfprintf+0x2fa>
    1206:	8f ee       	ldi	r24, 0xEF	; 239
    1208:	b8 22       	and	r11, r24
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <vfprintf+0x2fa>
    120c:	a7 2c       	mov	r10, r7
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <vfprintf+0x2fc>
    1210:	ae 2c       	mov	r10, r14
    1212:	8b 2d       	mov	r24, r11
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	b4 fe       	sbrs	r11, 4
    1218:	0d c0       	rjmp	.+26     	; 0x1234 <vfprintf+0x31e>
    121a:	fe 01       	movw	r30, r28
    121c:	e7 0d       	add	r30, r7
    121e:	f1 1d       	adc	r31, r1
    1220:	20 81       	ld	r18, Z
    1222:	20 33       	cpi	r18, 0x30	; 48
    1224:	19 f4       	brne	.+6      	; 0x122c <vfprintf+0x316>
    1226:	e9 ee       	ldi	r30, 0xE9	; 233
    1228:	be 22       	and	r11, r30
    122a:	09 c0       	rjmp	.+18     	; 0x123e <vfprintf+0x328>
    122c:	a3 94       	inc	r10
    122e:	b2 fe       	sbrs	r11, 2
    1230:	06 c0       	rjmp	.+12     	; 0x123e <vfprintf+0x328>
    1232:	04 c0       	rjmp	.+8      	; 0x123c <vfprintf+0x326>
    1234:	86 78       	andi	r24, 0x86	; 134
    1236:	90 70       	andi	r25, 0x00	; 0
    1238:	00 97       	sbiw	r24, 0x00	; 0
    123a:	09 f0       	breq	.+2      	; 0x123e <vfprintf+0x328>
    123c:	a3 94       	inc	r10
    123e:	8b 2c       	mov	r8, r11
    1240:	99 24       	eor	r9, r9
    1242:	b3 fc       	sbrc	r11, 3
    1244:	14 c0       	rjmp	.+40     	; 0x126e <vfprintf+0x358>
    1246:	b0 fe       	sbrs	r11, 0
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <vfprintf+0x352>
    124a:	af 14       	cp	r10, r15
    124c:	28 f4       	brcc	.+10     	; 0x1258 <vfprintf+0x342>
    124e:	e7 2c       	mov	r14, r7
    1250:	ef 0c       	add	r14, r15
    1252:	ea 18       	sub	r14, r10
    1254:	af 2c       	mov	r10, r15
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <vfprintf+0x352>
    1258:	e7 2c       	mov	r14, r7
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <vfprintf+0x352>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	b6 01       	movw	r22, r12
    1262:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    1266:	a3 94       	inc	r10
    1268:	af 14       	cp	r10, r15
    126a:	c0 f3       	brcs	.-16     	; 0x125c <vfprintf+0x346>
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <vfprintf+0x360>
    126e:	af 14       	cp	r10, r15
    1270:	10 f4       	brcc	.+4      	; 0x1276 <vfprintf+0x360>
    1272:	fa 18       	sub	r15, r10
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <vfprintf+0x362>
    1276:	ff 24       	eor	r15, r15
    1278:	84 fe       	sbrs	r8, 4
    127a:	0f c0       	rjmp	.+30     	; 0x129a <vfprintf+0x384>
    127c:	80 e3       	ldi	r24, 0x30	; 48
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	b6 01       	movw	r22, r12
    1282:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    1286:	82 fe       	sbrs	r8, 2
    1288:	1f c0       	rjmp	.+62     	; 0x12c8 <vfprintf+0x3b2>
    128a:	81 fe       	sbrs	r8, 1
    128c:	03 c0       	rjmp	.+6      	; 0x1294 <vfprintf+0x37e>
    128e:	88 e5       	ldi	r24, 0x58	; 88
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	10 c0       	rjmp	.+32     	; 0x12b4 <vfprintf+0x39e>
    1294:	88 e7       	ldi	r24, 0x78	; 120
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0d c0       	rjmp	.+26     	; 0x12b4 <vfprintf+0x39e>
    129a:	c4 01       	movw	r24, r8
    129c:	86 78       	andi	r24, 0x86	; 134
    129e:	90 70       	andi	r25, 0x00	; 0
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	91 f0       	breq	.+36     	; 0x12c8 <vfprintf+0x3b2>
    12a4:	81 fc       	sbrc	r8, 1
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x396>
    12a8:	80 e2       	ldi	r24, 0x20	; 32
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <vfprintf+0x398>
    12ac:	8b e2       	ldi	r24, 0x2B	; 43
    12ae:	b7 fc       	sbrc	r11, 7
    12b0:	8d e2       	ldi	r24, 0x2D	; 45
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b6 01       	movw	r22, r12
    12b6:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    12ba:	06 c0       	rjmp	.+12     	; 0x12c8 <vfprintf+0x3b2>
    12bc:	80 e3       	ldi	r24, 0x30	; 48
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	b6 01       	movw	r22, r12
    12c2:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    12c6:	ea 94       	dec	r14
    12c8:	7e 14       	cp	r7, r14
    12ca:	c0 f3       	brcs	.-16     	; 0x12bc <vfprintf+0x3a6>
    12cc:	7a 94       	dec	r7
    12ce:	f2 01       	movw	r30, r4
    12d0:	e7 0d       	add	r30, r7
    12d2:	f1 1d       	adc	r31, r1
    12d4:	80 81       	ld	r24, Z
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	b6 01       	movw	r22, r12
    12da:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    12de:	77 20       	and	r7, r7
    12e0:	a9 f7       	brne	.-22     	; 0x12cc <vfprintf+0x3b6>
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <vfprintf+0x3da>
    12e4:	80 e2       	ldi	r24, 0x20	; 32
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	b6 01       	movw	r22, r12
    12ea:	0e 94 b1 09 	call	0x1362	; 0x1362 <fputc>
    12ee:	fa 94       	dec	r15
    12f0:	ff 20       	and	r15, r15
    12f2:	c1 f7       	brne	.-16     	; 0x12e4 <vfprintf+0x3ce>
    12f4:	37 ce       	rjmp	.-914    	; 0xf64 <vfprintf+0x4e>
    12f6:	f6 01       	movw	r30, r12
    12f8:	26 81       	ldd	r18, Z+6	; 0x06
    12fa:	37 81       	ldd	r19, Z+7	; 0x07
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <vfprintf+0x3ec>
    12fe:	2f ef       	ldi	r18, 0xFF	; 255
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	c9 01       	movw	r24, r18
    1304:	2c 96       	adiw	r28, 0x0c	; 12
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	bf 90       	pop	r11
    1322:	af 90       	pop	r10
    1324:	9f 90       	pop	r9
    1326:	8f 90       	pop	r8
    1328:	7f 90       	pop	r7
    132a:	6f 90       	pop	r6
    132c:	5f 90       	pop	r5
    132e:	4f 90       	pop	r4
    1330:	3f 90       	pop	r3
    1332:	2f 90       	pop	r2
    1334:	08 95       	ret

00001336 <strnlen_P>:
    1336:	fc 01       	movw	r30, r24
    1338:	05 90       	lpm	r0, Z+
    133a:	61 50       	subi	r22, 0x01	; 1
    133c:	70 40       	sbci	r23, 0x00	; 0
    133e:	01 10       	cpse	r0, r1
    1340:	d8 f7       	brcc	.-10     	; 0x1338 <strnlen_P+0x2>
    1342:	80 95       	com	r24
    1344:	90 95       	com	r25
    1346:	8e 0f       	add	r24, r30
    1348:	9f 1f       	adc	r25, r31
    134a:	08 95       	ret

0000134c <strnlen>:
    134c:	fc 01       	movw	r30, r24
    134e:	61 50       	subi	r22, 0x01	; 1
    1350:	70 40       	sbci	r23, 0x00	; 0
    1352:	01 90       	ld	r0, Z+
    1354:	01 10       	cpse	r0, r1
    1356:	d8 f7       	brcc	.-10     	; 0x134e <strnlen+0x2>
    1358:	80 95       	com	r24
    135a:	90 95       	com	r25
    135c:	8e 0f       	add	r24, r30
    135e:	9f 1f       	adc	r25, r31
    1360:	08 95       	ret

00001362 <fputc>:
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	8c 01       	movw	r16, r24
    136c:	eb 01       	movw	r28, r22
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	81 ff       	sbrs	r24, 1
    1372:	1b c0       	rjmp	.+54     	; 0x13aa <fputc+0x48>
    1374:	82 ff       	sbrs	r24, 2
    1376:	0d c0       	rjmp	.+26     	; 0x1392 <fputc+0x30>
    1378:	2e 81       	ldd	r18, Y+6	; 0x06
    137a:	3f 81       	ldd	r19, Y+7	; 0x07
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	64 f4       	brge	.+24     	; 0x139e <fputc+0x3c>
    1386:	e8 81       	ld	r30, Y
    1388:	f9 81       	ldd	r31, Y+1	; 0x01
    138a:	01 93       	st	Z+, r16
    138c:	f9 83       	std	Y+1, r31	; 0x01
    138e:	e8 83       	st	Y, r30
    1390:	06 c0       	rjmp	.+12     	; 0x139e <fputc+0x3c>
    1392:	e8 85       	ldd	r30, Y+8	; 0x08
    1394:	f9 85       	ldd	r31, Y+9	; 0x09
    1396:	80 2f       	mov	r24, r16
    1398:	09 95       	icall
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	31 f4       	brne	.+12     	; 0x13aa <fputc+0x48>
    139e:	8e 81       	ldd	r24, Y+6	; 0x06
    13a0:	9f 81       	ldd	r25, Y+7	; 0x07
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	9f 83       	std	Y+7, r25	; 0x07
    13a6:	8e 83       	std	Y+6, r24	; 0x06
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <fputc+0x4c>
    13aa:	0f ef       	ldi	r16, 0xFF	; 255
    13ac:	1f ef       	ldi	r17, 0xFF	; 255
    13ae:	c8 01       	movw	r24, r16
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <__ultoa_invert>:
    13ba:	fa 01       	movw	r30, r20
    13bc:	aa 27       	eor	r26, r26
    13be:	28 30       	cpi	r18, 0x08	; 8
    13c0:	51 f1       	breq	.+84     	; 0x1416 <__ultoa_invert+0x5c>
    13c2:	20 31       	cpi	r18, 0x10	; 16
    13c4:	81 f1       	breq	.+96     	; 0x1426 <__ultoa_invert+0x6c>
    13c6:	e8 94       	clt
    13c8:	6f 93       	push	r22
    13ca:	6e 7f       	andi	r22, 0xFE	; 254
    13cc:	6e 5f       	subi	r22, 0xFE	; 254
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	8f 4f       	sbci	r24, 0xFF	; 255
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	af 4f       	sbci	r26, 0xFF	; 255
    13d6:	b1 e0       	ldi	r27, 0x01	; 1
    13d8:	3e d0       	rcall	.+124    	; 0x1456 <__ultoa_invert+0x9c>
    13da:	b4 e0       	ldi	r27, 0x04	; 4
    13dc:	3c d0       	rcall	.+120    	; 0x1456 <__ultoa_invert+0x9c>
    13de:	67 0f       	add	r22, r23
    13e0:	78 1f       	adc	r23, r24
    13e2:	89 1f       	adc	r24, r25
    13e4:	9a 1f       	adc	r25, r26
    13e6:	a1 1d       	adc	r26, r1
    13e8:	68 0f       	add	r22, r24
    13ea:	79 1f       	adc	r23, r25
    13ec:	8a 1f       	adc	r24, r26
    13ee:	91 1d       	adc	r25, r1
    13f0:	a1 1d       	adc	r26, r1
    13f2:	6a 0f       	add	r22, r26
    13f4:	71 1d       	adc	r23, r1
    13f6:	81 1d       	adc	r24, r1
    13f8:	91 1d       	adc	r25, r1
    13fa:	a1 1d       	adc	r26, r1
    13fc:	20 d0       	rcall	.+64     	; 0x143e <__ultoa_invert+0x84>
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__ultoa_invert+0x48>
    1400:	68 94       	set
    1402:	3f 91       	pop	r19
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	26 9f       	mul	r18, r22
    1408:	11 24       	eor	r1, r1
    140a:	30 19       	sub	r19, r0
    140c:	30 5d       	subi	r19, 0xD0	; 208
    140e:	31 93       	st	Z+, r19
    1410:	de f6       	brtc	.-74     	; 0x13c8 <__ultoa_invert+0xe>
    1412:	cf 01       	movw	r24, r30
    1414:	08 95       	ret
    1416:	46 2f       	mov	r20, r22
    1418:	47 70       	andi	r20, 0x07	; 7
    141a:	40 5d       	subi	r20, 0xD0	; 208
    141c:	41 93       	st	Z+, r20
    141e:	b3 e0       	ldi	r27, 0x03	; 3
    1420:	0f d0       	rcall	.+30     	; 0x1440 <__ultoa_invert+0x86>
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__ultoa_invert+0x5c>
    1424:	f6 cf       	rjmp	.-20     	; 0x1412 <__ultoa_invert+0x58>
    1426:	46 2f       	mov	r20, r22
    1428:	4f 70       	andi	r20, 0x0F	; 15
    142a:	40 5d       	subi	r20, 0xD0	; 208
    142c:	4a 33       	cpi	r20, 0x3A	; 58
    142e:	18 f0       	brcs	.+6      	; 0x1436 <__ultoa_invert+0x7c>
    1430:	49 5d       	subi	r20, 0xD9	; 217
    1432:	31 fd       	sbrc	r19, 1
    1434:	40 52       	subi	r20, 0x20	; 32
    1436:	41 93       	st	Z+, r20
    1438:	02 d0       	rcall	.+4      	; 0x143e <__ultoa_invert+0x84>
    143a:	a9 f7       	brne	.-22     	; 0x1426 <__ultoa_invert+0x6c>
    143c:	ea cf       	rjmp	.-44     	; 0x1412 <__ultoa_invert+0x58>
    143e:	b4 e0       	ldi	r27, 0x04	; 4
    1440:	a6 95       	lsr	r26
    1442:	97 95       	ror	r25
    1444:	87 95       	ror	r24
    1446:	77 95       	ror	r23
    1448:	67 95       	ror	r22
    144a:	ba 95       	dec	r27
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__ultoa_invert+0x86>
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 05       	cpc	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	08 95       	ret
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	0a 2e       	mov	r0, r26
    145c:	06 94       	lsr	r0
    145e:	57 95       	ror	r21
    1460:	47 95       	ror	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	ba 95       	dec	r27
    1468:	c9 f7       	brne	.-14     	; 0x145c <__ultoa_invert+0xa2>
    146a:	62 0f       	add	r22, r18
    146c:	73 1f       	adc	r23, r19
    146e:	84 1f       	adc	r24, r20
    1470:	95 1f       	adc	r25, r21
    1472:	a0 1d       	adc	r26, r0
    1474:	08 95       	ret

00001476 <_exit>:
    1476:	f8 94       	cli

00001478 <__stop_program>:
    1478:	ff cf       	rjmp	.-2      	; 0x1478 <__stop_program>
